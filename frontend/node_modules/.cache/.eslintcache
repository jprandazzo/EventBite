[{"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/index.js":"1","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/App.js":"2","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/sessionReducer.js":"3","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/reportWebVitals.js":"4","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/eventsReducer.js":"5","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/usersReducer.js":"6","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/index.js":"7","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/csrf.js":"8","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/users/SignUpForm.js":"9","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/users/OrganizerEventIndex.js":"10","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/EditEvent.js":"11","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/AllEvents.js":"12","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/SplashPage.js":"13","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/ShowEvent.js":"14","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/users/SignInForm.js":"15","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/CreateEvent.js":"16","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/SearchEvents.js":"17","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/errorPages/NotFoundErrorPage.js":"18","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/NavBar/NavBarLoggedIn.js":"19","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/NavBar/NavBarLoggedOut.js":"20","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/ordersReducer.js":"21","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/orders/OrderIndex.js":"22","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/orders/OrderShow.js":"23"},{"size":1577,"mtime":1690667941278,"results":"24","hashOfConfig":"25"},{"size":1904,"mtime":1690743905448,"results":"26","hashOfConfig":"25"},{"size":2571,"mtime":1690661625444,"results":"27","hashOfConfig":"25"},{"size":362,"mtime":1689882403602,"results":"28","hashOfConfig":"25"},{"size":2665,"mtime":1690699231977,"results":"29","hashOfConfig":"25"},{"size":2020,"mtime":1690703262942,"results":"30","hashOfConfig":"25"},{"size":873,"mtime":1690683800147,"results":"31","hashOfConfig":"25"},{"size":568,"mtime":1690693397997,"results":"32","hashOfConfig":"25"},{"size":6724,"mtime":1690590156941,"results":"33","hashOfConfig":"25"},{"size":1863,"mtime":1690703816729,"results":"34","hashOfConfig":"25"},{"size":8592,"mtime":1690671153566,"results":"35","hashOfConfig":"25"},{"size":1468,"mtime":1690668196183,"results":"36","hashOfConfig":"25"},{"size":1711,"mtime":1690703741224,"results":"37","hashOfConfig":"25"},{"size":4519,"mtime":1690692795731,"results":"38","hashOfConfig":"25"},{"size":6688,"mtime":1690590163825,"results":"39","hashOfConfig":"25"},{"size":8124,"mtime":1690747956618,"results":"40","hashOfConfig":"25"},{"size":1301,"mtime":1690704421771,"results":"41","hashOfConfig":"25"},{"size":299,"mtime":1690576131976,"results":"42","hashOfConfig":"25"},{"size":5859,"mtime":1690704512355,"results":"43","hashOfConfig":"25"},{"size":4500,"mtime":1690556710493,"results":"44","hashOfConfig":"25"},{"size":2011,"mtime":1690700039135,"results":"45","hashOfConfig":"25"},{"size":2321,"mtime":1690705125793,"results":"46","hashOfConfig":"25"},{"size":2483,"mtime":1690707254306,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},"rxi2wg",{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"84","usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"52"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"52"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"52"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"52"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"52"},"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/index.js",["134","135","136","137","138"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { restoreSession } from './store/sessionReducer.js';\nimport { BrowserRouter, useLocation } from 'react-router-dom';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport configureStore from './store';\nimport * as sessionActions from './store/sessionReducer'\nimport * as eventActions from './store/eventsReducer'\nimport * as userActions from './store/usersReducer'\nimport { createUser, loginUser, logoutUser } from './store/usersReducer'; \n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst store = configureStore();\n\nif (process.env.NODE_ENV !== \"production\") {\n  window.sessionActions = sessionActions;\n  window.eventActions = eventActions;\n  window.userActions = userActions;\n  window.store = store;\n}\n\nconst initializeApp = () => {\n  \n  root.render(\n    <React.StrictMode>\n      <ReduxProvider store={store}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </ReduxProvider>\n    </React.StrictMode>\n  );\n}\n\nif (\n  sessionStorage.getItem('currentUser') === null ||\n  sessionStorage.getItem('X-CSRF-Token') === null\n) {\nstore.dispatch(sessionActions.restoreSession()).then(initializeApp)\n} else {\ninitializeApp();\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/App.js",["139"],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/sessionReducer.js",["140"],[],"import csrfFetch from \"./csrf\"\n\nconst SET_CURRENT_USER = 'session/setCurrentUser'\nconst REMOVE_CURRENT_USER = 'session/removeCurrentUser'\n\nconst setCurrentUser = (user) => ({\n    type: SET_CURRENT_USER,\n    payload: user\n});\n  \nconst removeCurrentUser = () => ({\n    type: REMOVE_CURRENT_USER\n});\n\nexport const getCurrentUser = (state) => {\n    return state.session.user ? state.session.user : null\n}\n\nconst storeCSRFToken = response => {\n    const csrfToken = response.headers.get(\"X-CSRF-Token\");\n    if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n}\n\nasync function restoreCSRF () {\n    const response = await csrfFetch(\"/api/session\");\n    storeCSRFToken(response)\n    return response\n}\n  \nconst storeCurrentUser = user => {\n    if (user) sessionStorage.setItem(\"currentUser\", JSON.stringify(user));\n    else sessionStorage.removeItem(\"currentUser\");\n}\n\nexport const login = ({ email, password }) => async dispatch => {\n    const response = await csrfFetch(\"/api/session\", {\n      method: \"POST\",\n      body: JSON.stringify({ email, password })\n    });\n    const data = await response.json();\n    \n    storeCurrentUser(data.user);\n    dispatch(setCurrentUser(data.user))\n    return response;\n};\n\nexport const restoreSession = () => async dispatch => {\n    let res = await csrfFetch('/api/session');\n    storeCSRFToken(res);\n    let data = await res.json();\n    storeCurrentUser(data.user);\n    dispatch(setCurrentUser(data.user));\n    return res;\n}\n\nexport const logout = () => async dispatch => {\n    const response = await csrfFetch('/api/session', {\n        method: 'DELETE'\n    });\n    storeCurrentUser(null);\n    dispatch(removeCurrentUser());\n    return response;\n};\n\nexport const signup = user => async dispatch => {\n    const {firstName, lastName, email, password} = user;\n    const response = await csrfFetch('api/users', {\n        method: \"POST\",\n        body: JSON.stringify({\n            firstName,\n            lastName,\n            email,\n            password\n        })\n    });\n    const data = await response.json();\n\n    storeCurrentUser(data.user);\n    dispatch(setCurrentUser(data.user));\n    return response;\n};\n\nconst initialState = {\n    user: JSON.parse(sessionStorage.getItem('currentUser'))\n};\n\nconst sessionReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return {...state, user: action.payload};\n        case REMOVE_CURRENT_USER:\n            return {...state, user: null};\n        default:\n            return state;\n    }\n};\n\nexport default sessionReducer\n","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/reportWebVitals.js",[],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/eventsReducer.js",["141"],[],"import csrfFetch from \"./csrf\";\n\nconst RECEIVE_EVENT = 'events/receiveEvent'\nconst RECEIVE_EVENTS = 'events/receiveEvents'\nconst REMOVE_EVENT = 'events/removeEvent'\nconst RECEIVE_USER_EVENTS = 'receiveUserEvents'\n\n// get events from store\nexport const getEvents = (state) => {\n    return state && state.events ? Object.values(state.events) : []\n}\n\nexport const getEvent = (eventId) => state => {\n    return state.events ? state.events[eventId] : null\n}\n\n// dispatch actions\n\nexport const fetchEvents = () => async dispatch => {\n    const response = await fetch('/api/events')\n    const data = await response.json()\n    \n    dispatch({\n        type: RECEIVE_EVENTS,\n        events: data.events\n    })\n}\n\nexport const fetchEvent = (eventId) => async dispatch => {\n    const response = await fetch(`/api/events/${eventId}`)\n    const data = await response.json();\n\n    if (response.ok) {\n        dispatch({\n            type: RECEIVE_EVENT,\n            event: data.event\n        })\n    }\n    return [data.event, true]\n}\n\nexport const createEvent = (event) => async dispatch => {\n    const response = await csrfFetch(`/api/events/`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(event)\n    })\n    const data = await response.json();\n\n    dispatch({\n        type: RECEIVE_EVENT,\n        event: data.event\n    })\n}\n\nexport const updateEvent = (event) => async dispatch => {\n    const response = await csrfFetch(`/api/events/${event.id}`, {\n        method: 'PATCH',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(event)\n    })\n    const data = await response.json();\n\n    dispatch({\n        type: RECEIVE_EVENT,\n        event: data.event\n    })\n}\n\nexport const deleteEvent = (eventId) => async dispatch => {\n    const response = await csrfFetch(`/api/events/${eventId}`, {\n        method: 'DELETE',\n        headers: {'Content-Type': 'application/json'},\n    })\n\n    dispatch({\n        type: REMOVE_EVENT,\n        eventId: eventId\n    })\n}\n\nconst eventsReducer = (oldState = {}, action) => {\n    let newState = {...oldState}\n    switch (action.type) {\n        case RECEIVE_EVENTS:    \n            newState = {...oldState,...action.events}\n            return newState\n        case RECEIVE_EVENT:\n            newState[action.event.id] = action.event\n            return newState\n        case RECEIVE_USER_EVENTS:\n            newState = {...oldState,...action.events}\n            return newState\n        case REMOVE_EVENT:\n            delete newState[action.eventId]\n            return newState\n        default:\n            return oldState\n    }\n}\n\nexport default eventsReducer","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/usersReducer.js",["142"],[],"import csrfFetch from \"./csrf\"\n\nconst RECEIVE_USER = 'users/receiveUser'\nconst REMOVE_USER = 'users/removeUser'\nconst RECEIVE_USER_EVENTS = 'receiveUserEvents'\nconst RECEIVE_USER_ORDERS = 'receiveUserOrders';\n\nexport const getUser = (userId) => state => {\n    return state.users ? state.users[userId] : null\n}\n\nexport const fetchUser = (userId) => async dispatch => {\n    const response = await fetch(`/api/users/${userId}`)\n    const data = await response.json();\n    dispatch({\n        type: RECEIVE_USER,\n        user: data.user\n    })\n}\n\nexport const fetchUserEvents = (userId) => async dispatch => {\n    const response = await fetch(`/api/users/${userId}`);\n    const data = await response.json();\n\n    dispatch({\n        type: RECEIVE_USER_EVENTS,\n        user: data.user,\n        events: data.events,\n        orders: data.orders\n    })\n\n}\n\nexport const updateUser = (user) => async dispatch => {\n    const response = await csrfFetch(`/api/users/${user.id}`, {\n        method: 'PATCH',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(user)\n    })\n    const data = await response.json();\n\n    dispatch({\n        type: RECEIVE_USER,\n        user: data\n    })\n}\n\nexport const deleteUser = (userId) => async dispatch => {\n    const response = await csrfFetch(`/api/users/${userId}`, {\n        method: 'DELETE',\n        headers: {'Content-Type': 'application/json'},\n    })\n\n    if (response.ok) {\n        dispatch({\n            type: REMOVE_USER,\n            userId: userId\n        })\n    }\n}\n\nexport default function usersReducer(state = {}, action) {\n    let newState = {...state};\n\n    switch(action.type) {\n        case RECEIVE_USER:\n            newState[action.user.id] = action.user;\n            return newState;\n        case RECEIVE_USER_EVENTS:\n            newState[action.user.id] = action.user\n            return newState\n        case REMOVE_USER:\n            delete newState[action.userId];\n            return newState;\n        default:\n            return state;\n    }\n}\n","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/index.js",[],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/csrf.js",[],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/users/SignUpForm.js",["143","144"],[],"import React, { useState } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport { useHistory, Link } from 'react-router-dom';\nimport * as sessionActions from \"../../store/sessionReducer\"\nimport './Authentication.css';\n\nexport default function SignUpForm () {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    // need to set a sessionUser such that if present, redirect and do \n    // not allow user to sign up\n\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [errors, setErrors] = useState([]);\n\n    const focusInput = (e) => {\n        //blur anything that's currently focused\n        Array.from(document.querySelectorAll('.input-field-input'))\n            .forEach(el => {\n                el.blur()\n            })\n        \n        //whichever div is clicked, find its input and focus it\n        if (e.target.className === 'auth-input-box') {\n\n            let textFieldTitle = Array.from(e.target.childNodes).filter(el => el.className === 'signup-signin-field-title')[0]\n            let input = e.target.childNodes[2].childNodes[0].childNodes[0]\n            input.focus()\n        } else if (e.target.className === 'signup-signin-field-title') {\n            \n            let outerDiv = e.target.parentNode\n            let input = outerDiv.childNodes[2].childNodes[0].childNodes[0]\n            input.focus()\n\n        } else if (e.target.className === 'signup-signin-field-input') {\n            e.target.focus()\n        }\n    }\n\n    function setClosestDivsActive(e){\n\n        //add 'focus' class to both surrounding divs of the input\n        //that was focused\n        let outerDiv = e.target.closest('div')\n        outerDiv.classList.add('active-div')\n\n        let textFieldTitle = Array.from(outerDiv.childNodes).filter(el => el.className === 'signup-signin-field-title')[0]\n        textFieldTitle.classList.add('active-input')\n    }\n\n    function setClosestDivsInactive(e) {\n        //remove 'focus' class from both surrounding divs of the input\n        //that was blurred\n        let outerDiv = e.target.closest('div')\n        outerDiv.classList.remove('active-div')\n        let textFieldTitle = Array.from(outerDiv.childNodes).filter(el => el.classList.contains('signup-signin-field-title'))[0]\n        textFieldTitle.classList.remove('active-input')\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        let firstName = 'joe';\n        let lastName = 'ra';\n\n        return dispatch(sessionActions.signup({email, password, firstName, lastName}))\n            .catch(async (res) => {\n                let data;\n                try {\n                // .clone() essentially allows you to read the response body twice\n                data = await res.clone().json();\n                } catch {\n                data = await res.text(); // Will hit this case if, e.g., server is down\n                }\n                if (data?.errors) setErrors(data.errors);\n                else if (data) setErrors([data]);\n                else setErrors([res.statusText]);\n            })\n            .then(() =>{history.push('/')});\n    }\n    return(\n        <>\n            <main onClick={e => focusInput(e)}>\n            <section className='split split-left' id='signin'>\n                    <div className='centered'>\n                        <div id='eblogo-auth'>\n                            <Link to='/'>\n                                <img src='https://cdn.evbstatic.com/s3-build/prod/1322331-rc2023-07-24_16.04-5e36c7c/django/images/logos/eb_orange_on_white_1200x630.png' />\n                            </Link>\n                        </div>\n                        <h1 id='signup-signin-h1'>Create an account</h1>\n\n                        <form>\n                            <div className='auth-input-box'>\n                                <div className='signup-signin-field-title'>\n                                    Email address\n                                </div>\n\n                                <br />\n\n                                <span >\n                                    <label>\n                                        <input className='signup-signin-field-input'\n                                               type='text' \n                                               name='email'\n                                               onChange={e => setEmail(e.target.value)}\n                                               onFocus={e => setClosestDivsActive(e)}\n                                               onBlur={e => setClosestDivsInactive(e)}\n                                        />\n                                    </label>\n                                </span>\n                            </div>\n\n                            <br />\n\n                            <div className='auth-input-box'>\n                                <div className='signup-signin-field-title'>\n                                    Password\n                                </div>\n\n                                <br />\n\n                                <span >\n                                    <label>\n                                        <input className='signup-signin-field-input'\n                                               type='password' \n                                               name='password'\n                                               onChange={e => setPassword(e.target.value)}\n                                               onFocus={e => setClosestDivsActive(e)}\n                                               onBlur={e => setClosestDivsInactive(e)}\n                                        />\n                                    </label>\n                                </span>\n                            </div>\n\n                            <br />\n\n                            <ul>\n                                {errors.map(error => <li key={error}>{error}</li>)}\n                            </ul>\n\n                            <br />\n\n                            <button className='auth-button' onClick={handleSubmit}>\n                                Sign up\n                            </button>\n                        </form>\n                        <div className='signup-signin-switch'>\n                            <Link to='/signin'>Log in</Link>\n                        </div>\n                    </div>\n                </section>\n                <section className='split split-right' id='auth-side-photo'>\n                    <div className='centered login-image'>\n                        {/* <img src='https://i.ibb.co/Qp4jyky/Screenshot-2023-07-26-at-1-38-15-PM.png' /> */}\n                    </div>\n                </section>\n            </main>\n        </>\n    )\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/users/OrganizerEventIndex.js",["145","146"],[],"import NavBarLoggedIn from \"../NavBar/NavBarLoggedIn\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport * as sessionActions from '../../store/sessionReducer'\nimport * as userActions from '../../store/usersReducer'\nimport * as eventActions from '../../store/eventsReducer'\nimport \"./OrganizerEventIndex.css\"\n\nexport default function OrganizerEventIndex () {\n    const dispatch = useDispatch();\n    const currentUserId = useSelector(sessionActions.getCurrentUser).id\n    const currentUser = useSelector(userActions.getUser(currentUserId))\n    const organizerEventIds = currentUser ?.organizedEvents\n    const allEvents = Array.from(useSelector(eventActions.getEvents))\n    const currentUserOrganizedEvents = organizerEventIds ? allEvents.filter(el => organizerEventIds.includes(el.id)) : null\n    useEffect(() =>{\n        let getData = setTimeout(() => {\n            dispatch(userActions.fetchUserEvents(currentUserId));\n          }, 0)\n        return () => clearTimeout(getData)\n    }, [])\n\n    const handleDeleteEvent = (eventId) =>{\n        return dispatch(eventActions.deleteEvent(eventId))\n    }\n\n    return(\n        <>\n        <NavBarLoggedIn />\n        <br/><br/>\n        <h1 className='organizer-index'>Events</h1>\n        <ul className='organizer-index-ul'>\n            {currentUserOrganizedEvents?.map(event => \n            <><li>{event.title}</li>\n            <li>{event.timestampStart}</li>\n            <li>{event.venueName}</li>\n            <li>Sold: {event.ticketsSold}/{event.capacity}</li>\n            <li>Gross: ${event.ticketsSold * event.price}</li>\n            <Link to={`/events/${event.id}/edit`}>Edit</Link>\n            <button onClick={() => handleDeleteEvent(event.id)}>Delete</button>\n            </>\n            )}\n        </ul>\n        </>\n    )\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/EditEvent.js",["147","148","149"],[],"import React, { useState, useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { Link, useParams, useHistory } from 'react-router-dom';\nimport * as eventActions from \"../../store/eventsReducer\"\nimport * as sessionActions from '../../store/sessionReducer'\nimport NavBarLoggedIn from \"../NavBar/NavBarLoggedIn\";\nimport NotFoundErrorPage from \"../errorPages/NotFoundErrorPage\";\nimport './EditEvent.css'\n\nexport default function EditEvent () {\n    const history = useHistory();\n    const dispatch = useDispatch();\n    let current_user = useSelector(sessionActions.getCurrentUser)\n    \n    const {eventId} = useParams();\n\n    const [doneLoading, setDoneLoading] = useState(false);\n    const [event, setEvent] = useState(undefined)\n\n    useEffect(() =>{\n        const awaitFetch = async () => {\n            const res = await dispatch(eventActions.fetchEvent(eventId))\n            setEvent(res[0])\n            setDoneLoading(res[1])\n        }\n        awaitFetch()\n    }, [])\n    \n    useEffect(() =>{\n        setTitle(event ? event.title : '')\n        setOrganizerName(event ? event.organizerName : '')\n        setEventType(event ? event.eventType : '')\n        setEventCategory(event ? event.eventCategory : '')\n        setVenueName(event ? event.venueName : '')\n        setAddress(event ? event.address : '')\n        setTimestampStart(event ? event.timestampStart : '')\n        setTimestampEnd(event ? event.timestampEnd : '')\n        setCapacity(event ? event.capacity : '')\n        setPrice(event ? event.price : '')\n        setDescription(event ? event.description : '')\n    },[event])\n\n    const [title, setTitle] = useState(event ? event.title : '')\n    const [organizerName, setOrganizerName] = useState(event ? event.organizerName : '')\n    const [eventType, setEventType] = useState(event ? event.eventType : '')\n    const [eventCategory, setEventCategory] = useState(event ? event.eventCategory : '')\n    const [venueName, setVenueName] = useState(event ? event.venueName : '')\n    const [address, setAddress] = useState(event ? event.address : '')\n    const [timestampStart, setTimestampStart] = useState(event ? event.timestampStart : '')\n    const [timestampEnd, setTimestampEnd] = useState(event ? event.timestampEnd : '')\n    const [capacity, setCapacity] = useState(event ? event.capacity : 0)\n    const [price, setPrice] = useState(event ? event.price : 0);\n    const [description, setDescription] = useState(event ? event.description : '')\n    const [errors, setErrors] = useState([]);\n    \n    const handleUpdate = () => {\n        let event = {\n            id: eventId,\n            title,\n            organizerName,\n            eventType,\n            eventCategory,\n            venueName,\n            address,\n            timestampStart,\n            timestampEnd,\n            capacity,\n            price,\n            description\n        }\n        setErrors([])\n        return dispatch(eventActions.updateEvent(event))\n            // .catch(async (res) => {\n            //     let data;\n            //     try {\n            //         data = await res.clone().json();\n            //     } catch {\n            //         data = await res.text();\n            //     }\n            //     if (data?.errors) setErrors(data.errors);\n            //     else if (data) setErrors([data]);\n            //     else setErrors([res.statusText]);\n            // })\n            .then(() =>{history.push(`/organizer/events`)});\n    };\n\n    if (!doneLoading) {\n        return <></>\n    } else {\n        if (event) {\n            return (\n                <>\n                    <NavBarLoggedIn />\n                    <br /><br />\n\n                    <span id='back-to-organized-events'>\n                        <Link to='/organizer/events'>Events</Link>\n                    </span>\n                    <br /><br/><br/>\n                    <section id='basic-info'>\n                        <form><h1 className='h1-default'>Edit Event</h1><br/>\n                            <label>Title\n                                <input type='text' name='title' onChange={e => setTitle(e.target.value)} value={title} />\n                            </label><br/>\n                            <label>Organizer Name\n                                <input type='text' name='organizer-name' onChange={e => setOrganizerName(e.target.value)} value={organizerName}/>\n                            </label><br/>\n                            <label>Type\n                                <input type='text' name='type' onChange={e => setEventType(e.target.value)} value={eventType}/>\n                            </label><br/>\n                            <label>Category\n                                <input type='text' name='category' onChange={e => setEventCategory(e.target.value)} value={eventCategory}/>\n                            </label><br/>\n                            <label>Venue\n                                <input type='text' name='venue-name' onChange={e => setVenueName(e.target.value)} value={venueName}/>\n                            </label><br/>\n                            <label>Address\n                                <input type='text' name='address' onChange={e => setAddress(e.target.value)} value={address}/>\n                            </label><br/>\n                            <label>Start Date/Time\n                                <input type='text' name='timestamp_start' onChange={e => setTimestampStart(e.target.value)} value={timestampStart}/>\n                            </label><br/>\n                            <label>End Date/Time\n                                <input type='text' name='timestamp-end' onChange={e => setTimestampEnd(e.target.value)} value={timestampEnd}/>\n                            </label><br/>\n                            <label>Capacity\n                                <input type='text' name='capacity' onChange={e => setCapacity(e.target.value)} value={capacity}/>\n                            </label> <br/>\n                            <label>Price\n                                <input type='text' name='price' onChange={e => setPrice(e.target.value)} value={`${price}`}/>\n                            </label> <br/>\n                            <label>Description\n                                <input type='text' name='description' onChange={e => setDescription(e.target.value)} value={description}/>\n                            </label>\n                        </form>\n                        <button onClick={handleUpdate}>Save</button>\n                        {/*<div>\n                            <div>\n                            <svg id=\"title-edit-svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"title-edit_svg__eds-icon--title-edit_base\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2 2v3h1V3h5v10H6v1h5v-1H9V3h5v2h1V2H2z\"></path><g id=\"title-edit_svg__eds-icon--title-edit_lines\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"><path d=\"M15 9h7v1h-7zM15 13h7v1h-7zM6 17h16v1H6zM6 21h16v1H6z\"></path></g></svg>\n                            </div>\n                            <span id='basic-info-title'>Basic Info</span>\n                            <div id='basic-info-description'>\n                                Name your event and tell event-goers why they should come. Add details that highlight what makes it unique.\n                            </div>\n                        </div>\n\n                        <form>\n                            <div className='create-event-title-box'>\n                                <div className='create-event-placeholder-title'>\n                                    Event Title <span className='required-red'>*</span>\n                                </div>\n\n                                <br />\n\n                                <span>\n                                    <label>\n                                        <input className='create-event-title-input'\n                                                type='text' \n                                                name='title'\n                                                onChange={e => setTitle(e.target.value)}\n                                                onFocus={e => setClosestDivsActive(e)}\n                                                onBlur={e => setClosestDivsInactive(e)}\n                                        />\n                                    </label>\n                                </span>\n                            </div>\n                        </form> */}\n                    </section>\n                    \n                </>\n            )\n        } else return <NotFoundErrorPage />\n\n    }\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/AllEvents.js",["150"],[],"import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { Link } from \"react-router-dom/\";\nimport * as eventActions from '../../store/eventsReducer'\nimport NavBarLoggedIn from \"../NavBar/NavBarLoggedIn\";\nimport './AllEvents.css'\n\nexport default function AllEvents () {\n    \n    const dispatch = useDispatch();\n    \n    useEffect(() =>{\n        let getData = setTimeout(() => {\n            dispatch(eventActions.fetchEvents());\n          }, 0)\n        return () => clearTimeout(getData)\n    }, [])\n\n    const allEvents = useSelector(eventActions.getEvents)\n    return (\n        <>\n            <NavBarLoggedIn></NavBarLoggedIn>\n            <br/><br/>\n            <ul className='events-index'>\n            {allEvents.map(event => {\n                return (<>\n                    <Link to={`events/${event.id}`}><b>{event.title}:</b></Link>\n                    <li>Organizer: {event.organizerName}</li>\n                    <li>Location: {event.venueName}</li>\n                    <li>Date/Time: {event.timestampStart} - {event.timestampEnd}</li>\n                    <li>Type: {event.eventType}</li>\n                    <li>Category: {event.eventCategory}</li>\n                    <li>{event.capacity - event.ticketsSold} tickets remaining</li>\n                    <li>Price: {event.price}</li>\n                    <li>Description: {event.description}</li>\n                </>)\n            })}\n            </ul>\n        </>\n    )\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/SplashPage.js",["151"],[],"import NavBarLoggedIn from \"../NavBar/NavBarLoggedIn\";\nimport NavBarLoggedOut from \"../NavBar/NavBarLoggedOut\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport * as sessionActions from '../../store/sessionReducer.js';\nimport * as eventActions from'../../store/eventsReducer';\nimport * as userActions from '../../store/usersReducer';\nimport './SplashPage.css';\n\n\nexport default function SplashPage () {\n    const dispatch = useDispatch();\n    const currentUserId = useSelector(sessionActions.getCurrentUser).id\n    const currentUser = useSelector(userActions.getUser(currentUserId))\n    const allEvents = useSelector(eventActions.getEvents)\n\n    useEffect(() =>{\n        let getData = setTimeout(() => {\n            dispatch(userActions.fetchUserEvents(currentUserId));\n            dispatch(eventActions.fetchEvents)\n          }, 0)\n        return () => clearTimeout(getData)\n    }, [])\n\n    return(\n        <>\n            <main id='splash-main'>\n            {currentUser ? <NavBarLoggedIn /> : <NavBarLoggedOut />}\n            <br />\n            <br />\n            <div className='splash-banner'>\n                <Link to='/search'>\n                    <button>\n                        Find your next event\n                    </button>\n                </Link>\n            </div>\n            <h2>Events:</h2>\n            {allEvents.map(event =>{\n                return(<>\n                    <p>{event.title}<br/>\n                    {event.timestampStart}<br/>\n                    {event.organizerName}<br/>\n                    </p><br/><br/>\n                </>)\n            })}\n            </main>\n        </>\n    )\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/ShowEvent.js",["152","153","154"],[],"import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport * as eventActions from '../../store/eventsReducer'\nimport * as sessionActions from '../../store/sessionReducer'\nimport * as orderActions from '../../store/ordersReducer'\nimport NavBarLoggedIn from \"../NavBar/NavBarLoggedIn\";\nimport './ShowEvent.css'\nimport NotFoundErrorPage from \"../errorPages/NotFoundErrorPage\";\n\nexport default function ShowEvent () {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const {eventId} = useParams();\n    const currentUser = useSelector(sessionActions.getCurrentUser)\n\n    const [doneLoading, setDoneLoading] = useState(false);\n    const [event, setEvent] = useState(undefined)\n    const [numTickets, setNumTickets] = useState(0)\n    \n    useEffect(() =>{\n        const awaitFetchBeforeLoading = async () => {\n            const res = await dispatch(eventActions.fetchEvent(eventId))\n            setEvent(res[0])\n            setDoneLoading(res[1])\n        }\n        awaitFetchBeforeLoading()\n    }, [])\n\n    // const handleTicketDecreaseStyling = () => {\n    //     el = document.querySelector('.ticket-count-decrease')\n\n    //     if (numTickets) {\n    //         el.classList.add('clickable-ticket-button')\n    //         el.addEventListener('click', setNumTickets(numTickets-1))\n    //     } else {\n    //         if (el.classList.includes('clickable-ticket-button')) {\n    //             el.classList.remove('clickable-ticket-button')};\n    //         el.removeEventListener('click');\n    //     }\n    // }\n\n    const handlePurchase = (eventId) => {\n        const order = {\n            numTickets,\n            ticketholderId: currentUser.id,\n            eventId\n        }\n\n        return dispatch(orderActions.createOrder(order))\n        .then(history.push(`/user/${currentUser.id}`));\n    }\n\n    useEffect(() =>{\n        if (numTickets) {\n            document.querySelector('.ticket-count-decrease').addEventListener('click', handlePlusMinusClick)\n        }\n    }, [numTickets])\n\n    const handlePlusMinusClick = (e) =>{\n        if (e.target.innerHTML === '+') {\n            setNumTickets(numTickets+1)\n        } else {\n            setNumTickets(numTickets-1)\n        }\n    }\n    \n    if (!doneLoading) {\n        return <></>\n    } else {\n        if (event) {\n            return (\n                <>\n                    <NavBarLoggedIn />\n                    {/* <svg width='1676' height='430' viewBox='0 0 1676 430' fill='none' xmlns='http://www.w3.org/2000/svg'><g clip-path='url(#clip0_3405_50198)'><path d='M1669.31 -124.702C1704.63 -198.281 1599.75 -278.89 1440.21 -219.509C1280.67 -160.128 1138.67 -174.472 940.588 -234.668C588.163 -341.792 438.492 -309.897 215.804 -220.763C150.423 -195.199 15.9418 -122.33 0.814447 -35.3897C-18.0424 73.26 298.334 62.7189 143.288 203.358C-11.7568 343.996 26.7216 552.457 835.628 313.658C939.215 283.079 1109.58 269.122 1259.68 366.729C1409.78 464.336 1549.16 434.834 1602.55 362.937C1716.96 208.836 1609.92 -1.08292 1669.31 -124.702Z' fill='#EDF1FC'/></g><defs><clipPath id='clip0_3405_50198'><rect width='1676' height='430' fill='white'/></clipPath></defs></svg> */}\n                    <ul className='show-event-page'>\n                        <b>{event.title}:</b>\n                            <li>Organizer: {event.organizerName}</li>\n                            <li>Location: {event.venueName}</li>\n                            <li>Date/Time: {event.timestampStart} - {event.timestampEnd}</li>\n                            <li>Type: {event.eventType}</li>\n                            <li>Category: {event.eventCategory}</li>\n                            <li>{event.capacity - event.ticketsSold} tickets remaining</li>\n                            <li>{event.price ? event.price : 'Free'}</li>\n                            <li>Description: {event.description}</li>\n                    </ul>\n                    <div className='ticket-purchase-container'>\n                       <button className='ticket-count-decrease'>-</button>\n                        <div className='ticket-count-text'>{numTickets}</div>\n                        <button className='ticket-count-increase' onClick={e=>{handlePlusMinusClick(e)}}>+</button>\n                        <button onClick={() =>handlePurchase(event.id)}>Get tickets</button>\n                    </div>\n    \n                </>\n            )\n        } else return <NotFoundErrorPage />\n    }\n\n    \n    \n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/users/SignInForm.js",["155","156","157"],[],"import { useState, useEffect } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { useHistory, Link } from 'react-router-dom';\nimport * as sessionActions from \"../../store/sessionReducer\"\nimport './Authentication.css';\n\nexport default function SignInForm ({currentUser}) {\n    const history = useHistory();\n    const dispatch = useDispatch();\n    // need to set a sessionUser such that if present, redirect and do \n    // not allow user to sign up\n    // const [firstName, setFirstName] = useState('')\n    // const [lastName, setLastName] = useState('')\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [errors, setErrors] = useState([]);\n\n    const focusInput = (e) => {\n        //blur anything that's currently focused\n        Array.from(document.querySelectorAll('.input-field-input'))\n            .forEach(el => {\n                el.blur()\n            })\n        \n        //whichever div is clicked, find its input and focus it\n        if (e.target.className === 'auth-input-box') {\n\n            let textFieldTitle = Array.from(e.target.childNodes).filter(el => el.className === 'signup-signin-field-title')[0]\n            let input = e.target.childNodes[2].childNodes[0].childNodes[0]\n            input.focus()\n        } else if (e.target.className === 'signup-signin-field-title') {\n            \n            let outerDiv = e.target.parentNode\n            let input = outerDiv.childNodes[2].childNodes[0].childNodes[0]\n            input.focus()\n\n        } else if (e.target.className === 'signup-signin-field-input') {\n            e.target.focus()\n        }\n    }\n\n    function setClosestDivsActive(e){\n\n        //add 'focus' class to both surrounding divs of the input\n        //that was focused\n        let outerDiv = e.target.closest('div')\n        outerDiv.classList.add('active-div')\n\n        let textFieldTitle = Array.from(outerDiv.childNodes).filter(el => el.className === 'signup-signin-field-title')[0]\n        textFieldTitle.classList.add('active-input')\n    }\n\n    function setClosestDivsInactive(e) {\n        //remove 'focus' class from both surrounding divs of the input\n        //that was blurred\n        let outerDiv = e.target.closest('div')\n        outerDiv.classList.remove('active-div')\n        let textFieldTitle = Array.from(outerDiv.childNodes).filter(el => el.classList.contains('signup-signin-field-title'))[0]\n        textFieldTitle.classList.remove('active-input')\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        setErrors([])\n        return dispatch(sessionActions.login({email, password}))\n            // .catch(async (res) => {\n            //     let data;\n            //     try {\n            //         data = await res.clone().json();\n            //     } catch {\n            //         data = await res.text();\n            //     }\n            //     if (data?.errors) setErrors(data.errors);\n            //     else if (data) setErrors([data]);\n            //     else setErrors([res.statusText]);\n            // })\n            .then(() =>{history.push('/')});\n    };\n    return(\n        <>\n            <main onClick={e => focusInput(e)}>\n                <section className='split split-left' id='signin'>\n                    <div className='centered'>\n                        <div id='eblogo-auth'>\n                            <Link to='/'>\n                                <img src='https://cdn.evbstatic.com/s3-build/prod/1322331-rc2023-07-24_16.04-5e36c7c/django/images/logos/eb_orange_on_white_1200x630.png' />\n                            </Link>\n                        </div>\n                        <h1 id='signup-signin-h1'>Log in</h1>\n\n                        <form>\n                            <div className='auth-input-box'>\n                                <div className='signup-signin-field-title'>\n                                    Email address\n                                </div>\n\n                                <br />\n\n                                <span >\n                                    <label>\n                                        <input className='signup-signin-field-input'\n                                               type='text' \n                                               name='email'\n                                               onChange={e => setEmail(e.target.value)}\n                                               onFocus={e => setClosestDivsActive(e)}\n                                               onBlur={e => setClosestDivsInactive(e)}\n                                        />\n                                    </label>\n                                </span>\n                            </div>\n\n                            <br />\n\n                            <div className='auth-input-box'>\n                                <div className='signup-signin-field-title'>\n                                    Password\n                                </div>\n\n                                <br />\n\n                                <span >\n                                    <label>\n                                        <input className='signup-signin-field-input'\n                                               type='password' \n                                               name='password'\n                                               onChange={e => setPassword(e.target.value)}\n                                               onFocus={e => setClosestDivsActive(e)}\n                                               onBlur={e => setClosestDivsInactive(e)}\n                                        />\n                                    </label>\n                                </span>\n                            </div>\n\n                            <br />\n\n                            <ul>\n                                {errors.map(error => <li key={error}>{error}</li>)}\n                            </ul>\n\n                            <br />\n\n                            <button className='auth-button' onClick={handleSubmit}>\n                                Log in\n                            </button>\n                        </form>\n                        <div class='signup-signin-switch'>\n                            <Link to='/signup'>Sign up</Link>\n                        </div>\n                    </div>\n                </section>\n                <section className='split split-right' id='auth-side-photo'>\n                    <div className='centered login-image'>\n                        {/* <img src='https://i.ibb.co/Qp4jyky/Screenshot-2023-07-26-at-1-38-15-PM.png' /> */}\n                    </div>\n                </section>\n            </main>\n        </>\n    )\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/CreateEvent.js",["158"],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/SearchEvents.js",["159","160","161","162"],[],"import { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport * as sessionActions from '../../store/sessionReducer.js';\nimport * as eventActions from'../../store/eventsReducer';\nimport * as userActions from '../../store/usersReducer';\n\nimport './SearchEvents.css'\n\nexport default function EventsSearch () {\n\n    const dispatch = useDispatch();\n    const currentUserId = useSelector(sessionActions.getCurrentUser).id\n    const currentUser = useSelector(userActions.getUser(currentUserId))\n    const allEvents = useSelector(eventActions.getEvents)\n\n    useEffect(() =>{\n        let getData = setTimeout(() => {\n            dispatch(userActions.fetchUserEvents(currentUserId));\n            dispatch(eventActions.fetchEvents)\n          }, 0)\n        return () => clearTimeout(getData)\n    }, [])\n\n    return (\n        <>\n        <div className='search-page-input'>Search for Anything</div>\n        <div className='search-page-location-selector'>New York</div>\n        <div className='search-page-buttons'>\n            <button>Today</button>\n            <button>This Weekend</button>\n            <button>Free</button>\n            <button>Music</button>\n            <button>Food & Drink</button>\n        </div>\n        </>\n    )\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/errorPages/NotFoundErrorPage.js",[],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/NavBar/NavBarLoggedIn.js",["163"],[],"import { useDispatch, useSelector } from 'react-redux';\nimport {useHistory, Link} from 'react-router-dom';\nimport * as sessionActions from '../../store/sessionReducer.js';\nimport * as eventActions from'../../store/eventsReducer';\nimport * as userActions from '../../store/usersReducer';\nimport './NavBarLoggedIn.css';\n\nexport default function NavBarLoggedIn () {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const currentUserId = useSelector(sessionActions.getCurrentUser).id\n    const currentUser = useSelector(userActions.getUser(currentUserId))\n    // **LOOK AT HISTORY.LOCATION**\n\n    // const toggleDropdown = (e) => {\n    //     let el = e.target.closest('span')\n    //     let dropdown = el.childNodes[2]\n    //     dropdown.classList.toggle('hidden')\n    // }\n\n    // const showDropdown = (e) => {\n    //     let el = e.target.closest('span')\n    //     let dropdown = el.childNodes[2]\n\n    //     dropdown.classList.remove('hidden')\n    // }    \n\n    // const hideDropdown = (e) => {\n    //     let el = e.target.closest('span')\n    //     let dropdown = el.childNodes[2]\n\n    //     dropdown.classList.add('hidden')\n    // }\n\n    const logout = (e) => {\n        e.preventDefault();\n\n        return (dispatch(sessionActions.logout()))\n            // .catch(async (res) => {\n            //     let data;\n            //     try {\n            //         data = await res.clone().json();\n            //     } catch {\n            //         data = await res.text();\n            //     }\n            //     if (data?.errors) setErrors(data.errors);\n            //     else if (data) setErrors([data]);\n            //     else setErrors([res.statusText]);\n            // });\n            .then(history.push('/signin'))\n        \n    }\n\n    return (\n        <>\n        <nav id='main-navigation'>\n            <ul className='navbar'>\n                <li className='nav-left'> \n                    <span id='eblogo-nav'>\n                        <Link to='/'>\n                            <img src='https://cdn.evbstatic.com/s3-build/prod/1322331-rc2023-07-24_16.04-5e36c7c/django/images/logos/eb_orange_on_white_1200x630.png' alt='app logo' />\n                        </Link>\n                    </span>\n                </li>\n\n                <li className='nav-left'> \n                    <span id='search-events'>\n                        <Link to='/search'>\n                            <svg id=\"magnifying-glass\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"magnifying-glass-chunky_svg__eds-icon--magnifying-glass-chunky_base\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M10 14c2.2 0 4-1.8 4-4s-1.8-4-4-4-4 1.8-4 4 1.8 4 4 4zm3.5.9c-1 .7-2.2 1.1-3.5 1.1-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6c0 1.3-.4 2.5-1.1 3.4l5.1 5.1-1.5 1.5-5-5.1z\"></path></svg>\n                            Search events\n                        </Link> \n                    </span>\n                </li>\n\n                <li className='nav-right user-dropdown'>\n                    <span className='dropdown' id='user-dropdown' /*onClick={e =>toggleDropdown(e)} onMouseOver={e => showDropdown(e)} onBlur={e =>hideDropdown(e)} */ >\n                        {currentUser?.email}\n                        <svg id=\"chevron-down\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"chevron-down-chunky_svg__eds-icon--chevron-down-chunky_base\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M7 10.2l5 5 5-5-1.4-1.4-3.6 3.6-3.6-3.6z\"></path></svg>\n                        <div className='dropdown-content hidden' id='user-dropdown-content'>\n                            <ul>\n                                <li>Browse Events</li>\n                                <li>Manage my Events</li>\n                                <li><Link to={`/user/${currentUserId}`}>Tickets ({currentUser?.attendingEvents.length})</Link></li>\n                                <li>Liked</li>\n                                <li>Following</li>\n                                <li onClick={logout}>Logout</li>\n                            </ul>\n                        </div>\n                    </span>\n                </li>\n\n                <li className='nav-right'> \n                    <span>\n                        <Link to={`/users/${currentUser?.id}`}>\n                            <svg id='ticket' viewBox=\"0 0 24 24\"><path d=\"M10 13v-2h4v2zm6 5V6h-.4C15 7.4 13.8 8.4 12 8.4S9 7.4 8.4 6H8v12h.4c.6-1.4 1.8-2.4 3.6-2.4s3 1 3.6 2.4zM14 4h4v16h-4s0-2.4-2-2.4-2 2.4-2 2.4H6V4h4s0 2.4 2 2.4S14 4 14 4z\"></path></svg>\n                            Tickets\n                        </Link>\n                    </span>\n                </li>\n\n                <li className='nav-right'> \n                    <span>\n                        <Link to={`users/${currentUser?.id}/favorites`}>\n                            Likes\n                            <svg id=\"heart\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"heart-chunky_svg__eds-icon--heart-chunky_base\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M18.8 6.2C18.1 5.4 17 5 16 5c-1 0-2 .4-2.8 1.2L12 7.4l-1.2-1.2C10 5.4 9 5 8 5c-1 0-2 .4-2.8 1.2-1.5 1.6-1.5 4.2 0 5.8l6.8 7 6.8-7c1.6-1.6 1.6-4.2 0-5.8zm-1.4 4.4L12 16.1l-5.4-5.5c-.8-.8-.8-2.2 0-3C7 7.2 7.5 7 8 7c.5 0 1 .2 1.4.6l2.6 2.7 2.7-2.7c.3-.4.8-.6 1.3-.6s1 .2 1.4.6c.8.8.8 2.2 0 3z\"></path></svg>\n                        </Link>\n                    </span>\n                </li>\n\n                <li className='nav-right'> \n                    <span id='create-event-in'>\n                        <Link to='/events/create/'>\n                        <svg id=\"plus-sign\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"plus-chunky_svg__eds-icon--plus-chunky_base\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M13 11V4h-2v7H4v2h7v7h2v-7h7v-2z\"></path></svg>\n                            Create an event\n                        </Link>\n                    </span>\n                </li>\n            </ul>\n\n        </nav>\n        </>\n    )\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/NavBar/NavBarLoggedOut.js",[],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/ordersReducer.js",["164","165"],[],"import csrfFetch from \"./csrf\";\n\nconst RECEIVE_ORDER = 'receiveOrders';\nconst RECEIVE_USER_ORDERS = 'receiveUserOrders';\nconst RECEIVE_USER_EVENTS = 'receiveUserEvents'\nconst REMOVE_ORDER = 'removeOrders';\n\nexport const getOrder = (orderId) => state => {\n    return state.orders ? state.orders[orderId] : null\n}\n\nexport const getOrders = state => {\n    return state && state.orders ? Object.values(state.orders) : []\n}\n\nexport const fetchOrder = orderId => async dispatch =>{\n    const response = await fetch(`/api/orders/${orderId}`)\n    const data = await response.json();\n\n    if (response.ok) {\n        dispatch({\n            type: RECEIVE_ORDER,\n            order: data.order\n        })\n    }\n    return [data.order, true]\n}\n\nexport const createOrder = (order) => async dispatch => {\n    const response = await csrfFetch(`/api/orders`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(order)\n    })\n    const data = response.json()\n\n    dispatch({\n        type: REMOVE_ORDER,\n        order: data.order\n    })\n}\n\nexport const deleteOrder = (orderId) => async dispatch => {\n    const response = await csrfFetch(`/api/orders/${orderId}`, {\n        method: 'DELETE',\n        headers: {'Content-Type': 'application/json'},\n    })\n\n    dispatch({\n        type: REMOVE_ORDER,\n        orderId: orderId\n    })\n}\n\nconst ordersReducer = (oldState = {}, action) => {\n    let newState = {...oldState}\n    switch (action.type) {\n        // case RECEIVE_ORDERS:    \n        //     newState = {...oldState,...action.orders}\n        //     return newState\n        case RECEIVE_ORDER:\n            newState[action.order.id] = action.order\n            return newState\n        case RECEIVE_USER_EVENTS:\n            newState = {...oldState,...action.orders}\n            return newState\n        case REMOVE_ORDER:\n            delete newState[action.orderId]\n            return newState\n        default:\n            return oldState\n    }\n}\n\nexport default ordersReducer","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/orders/OrderIndex.js",["166"],[],"import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from \"react\";\nimport NavBarLoggedIn from '../NavBar/NavBarLoggedIn';\nimport * as sessionActions from '../../store/sessionReducer';\nimport * as userActions from '../../store/usersReducer';\nimport * as eventActions from '../../store/eventsReducer';\nimport * as orderActions from '../../store/ordersReducer';\nimport './OrderIndex.css'\n\nexport default function OrderIndex () {\n    const dispatch = useDispatch();\n    const currentUserId = useSelector(sessionActions.getCurrentUser).id\n    const currentUser = useSelector(userActions.getUser(currentUserId))\n    const orders = useSelector(orderActions.getOrders).sort((a,b) => b.id - a.id)\n    const events = useSelector(eventActions.getEvents)\n\n    useEffect(() =>{\n        let getData = setTimeout(() => {\n            dispatch(userActions.fetchUserEvents(currentUserId));\n          }, 0)\n        return () => clearTimeout(getData)\n    }, [])\n\n    const pluralizeOrders = () =>{\n        if (currentUser && currentUser.orders.length === 1) {\n            return 'order'\n        } else return 'orders'\n    }\n\n    if (currentUser) {return (\n        <>\n            <NavBarLoggedIn />\n            <main className='order-index-main'>\n                <div className='show-user-name-tile'>\n                    <p>Pic placeholder</p>\n                    <h1 className='show-user-name-tile-name'>{`${currentUser?.firstName} ${currentUser.lastName}`}</h1>\n                    <p>{currentUser?.orders.length} {pluralizeOrders()}</p>\n                </div>\n                <div className='order-index-orders'>\n                    <h2>Orders</h2>\n                    {orders.map(order =>{\n                        const event = events.filter(event => event.id === order.eventId)[0]\n                        return(\n                            <>\n                                <p>order #{order.id}</p>\n                                <p>ordered on {order.createdAt}</p>\n                                <p>{event.title}</p>\n                                <p>{event.date}</p>\n                                <p>{`$${event.price * order.numTickets}` || 'Free order'}</p>\n                            </>\n                        )\n                    })}\n                </div>\n            </main>\n        </>\n    )}\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/orders/OrderShow.js",["167","168"],[],"import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from \"react\";\nimport { useHistory, useParams, Link } from 'react-router-dom';\nimport NavBarLoggedIn from '../NavBar/NavBarLoggedIn';\nimport * as sessionActions from '../../store/sessionReducer';\nimport * as userActions from '../../store/usersReducer';\nimport * as eventActions from '../../store/eventsReducer';\nimport * as orderActions from '../../store/ordersReducer';\nimport './OrderShow.css'\n\nexport default function OrderShow () {\n    const dispatch = useDispatch();\n    const {orderId} = useParams();\n    const currentUserId = useSelector(sessionActions.getCurrentUser).id\n    const currentUser = useSelector(userActions.getUser(currentUserId))\n    const order = useSelector(orderActions.getOrder(orderId))\n    const event = useSelector(eventActions.getEvent(order?.eventId))\n    useEffect(() =>{\n        let getData = setTimeout(() => {\n            dispatch(userActions.fetchUserEvents(currentUserId));\n          }, 0)\n        return () => clearTimeout(getData)\n    }, [])\n\n    return(\n    <>\n        <NavBarLoggedIn /><br/><br/>\n        <div className='order-show-go-back'>\n            <Link to={`/users/${currentUserId}`}>Back to Current Orders</Link>\n        </div>\n        <div className='order-show-title-box'>\n            <h1 className='order-show-title'>Order for <Link to={`/events/${event?.id}`}>{event?.title}</Link></h1>\n            <p className='order-show-info'>\n                {event?.price ? `$${order.numTickets * event.price}` : `Free`} order #{order?.id} on {order?.createdAt}<br/>\n                <b>Event Information:</b>: from {event?.timestampStart} to {event?.timestampEnd}<br/>\n                {event?.address}\n            </p>\n        </div>\n        <div className='order-show-lower-box'>\n            <button>Cancel Order</button>\n            <div className='order-show-ticket-info'>\n                <h2 className='order-show-ticket-count'>({order?.numTickets}x) General Admission</h2><br/>\n                <h3>Contact Information</h3><br/>\n                <h4>First Name</h4><br/>\n                {currentUser?.firstName}<br/>\n                <h4>Last Name</h4><br/>\n                {currentUser?.lastName}<br/>\n                <h4>Email</h4><br/>\n                {currentUser?.email}\n            </div>\n        </div>\n        <div className='order-show-go-back'>\n            <Link to={`/users/${currentUserId}`}>Back to Current Orders</Link>\n        </div>\n    </>\n    )\n}",{"ruleId":"169","severity":1,"message":"170","line":6,"column":10,"nodeType":"171","messageId":"172","endLine":6,"endColumn":24},{"ruleId":"169","severity":1,"message":"173","line":7,"column":25,"nodeType":"171","messageId":"172","endLine":7,"endColumn":36},{"ruleId":"169","severity":1,"message":"174","line":13,"column":10,"nodeType":"171","messageId":"172","endLine":13,"endColumn":20},{"ruleId":"169","severity":1,"message":"175","line":13,"column":22,"nodeType":"171","messageId":"172","endLine":13,"endColumn":31},{"ruleId":"169","severity":1,"message":"176","line":13,"column":33,"nodeType":"171","messageId":"172","endLine":13,"endColumn":43},{"ruleId":"169","severity":1,"message":"177","line":15,"column":13,"nodeType":"171","messageId":"172","endLine":15,"endColumn":27},{"ruleId":"169","severity":1,"message":"178","line":24,"column":16,"nodeType":"171","messageId":"172","endLine":24,"endColumn":27},{"ruleId":"169","severity":1,"message":"179","line":71,"column":11,"nodeType":"171","messageId":"172","endLine":71,"endColumn":19},{"ruleId":"169","severity":1,"message":"180","line":6,"column":7,"nodeType":"171","messageId":"172","endLine":6,"endColumn":26},{"ruleId":"169","severity":1,"message":"181","line":28,"column":17,"nodeType":"171","messageId":"172","endLine":28,"endColumn":31},{"ruleId":"182","severity":1,"message":"183","line":90,"column":33,"nodeType":"184","endLine":90,"endColumn":173},{"ruleId":"185","severity":1,"message":"186","line":14,"column":31,"nodeType":"187","messageId":"188","endLine":14,"endColumn":60,"fix":"189"},{"ruleId":"190","severity":1,"message":"191","line":22,"column":8,"nodeType":"192","endLine":22,"endColumn":10,"suggestions":"193"},{"ruleId":"169","severity":1,"message":"194","line":13,"column":9,"nodeType":"171","messageId":"172","endLine":13,"endColumn":21},{"ruleId":"190","severity":1,"message":"195","line":27,"column":8,"nodeType":"192","endLine":27,"endColumn":10,"suggestions":"196"},{"ruleId":"169","severity":1,"message":"197","line":54,"column":12,"nodeType":"171","messageId":"172","endLine":54,"endColumn":18},{"ruleId":"190","severity":1,"message":"198","line":17,"column":8,"nodeType":"192","endLine":17,"endColumn":10,"suggestions":"199"},{"ruleId":"190","severity":1,"message":"191","line":24,"column":8,"nodeType":"192","endLine":24,"endColumn":10,"suggestions":"200"},{"ruleId":"169","severity":1,"message":"201","line":3,"column":10,"nodeType":"171","messageId":"172","endLine":3,"endColumn":14},{"ruleId":"190","severity":1,"message":"195","line":28,"column":8,"nodeType":"192","endLine":28,"endColumn":10,"suggestions":"202"},{"ruleId":"190","severity":1,"message":"203","line":58,"column":8,"nodeType":"192","endLine":58,"endColumn":20,"suggestions":"204"},{"ruleId":"169","severity":1,"message":"205","line":1,"column":20,"nodeType":"171","messageId":"172","endLine":1,"endColumn":29},{"ruleId":"169","severity":1,"message":"181","line":28,"column":17,"nodeType":"171","messageId":"172","endLine":28,"endColumn":31},{"ruleId":"182","severity":1,"message":"183","line":87,"column":33,"nodeType":"184","endLine":87,"endColumn":173},{"ruleId":"169","severity":1,"message":"197","line":26,"column":12,"nodeType":"171","messageId":"172","endLine":26,"endColumn":18},{"ruleId":"169","severity":1,"message":"201","line":2,"column":10,"nodeType":"171","messageId":"172","endLine":2,"endColumn":14},{"ruleId":"169","severity":1,"message":"206","line":14,"column":11,"nodeType":"171","messageId":"172","endLine":14,"endColumn":22},{"ruleId":"169","severity":1,"message":"207","line":15,"column":11,"nodeType":"171","messageId":"172","endLine":15,"endColumn":20},{"ruleId":"190","severity":1,"message":"191","line":23,"column":8,"nodeType":"192","endLine":23,"endColumn":10,"suggestions":"208"},{"ruleId":"169","severity":1,"message":"209","line":4,"column":13,"nodeType":"171","messageId":"172","endLine":4,"endColumn":25},{"ruleId":"169","severity":1,"message":"180","line":4,"column":7,"nodeType":"171","messageId":"172","endLine":4,"endColumn":26},{"ruleId":"169","severity":1,"message":"179","line":44,"column":11,"nodeType":"171","messageId":"172","endLine":44,"endColumn":19},{"ruleId":"190","severity":1,"message":"191","line":22,"column":8,"nodeType":"192","endLine":22,"endColumn":10,"suggestions":"210"},{"ruleId":"169","severity":1,"message":"211","line":3,"column":10,"nodeType":"171","messageId":"172","endLine":3,"endColumn":20},{"ruleId":"190","severity":1,"message":"191","line":23,"column":8,"nodeType":"192","endLine":23,"endColumn":10,"suggestions":"212"},"no-unused-vars","'restoreSession' is defined but never used.","Identifier","unusedVar","'useLocation' is defined but never used.","'createUser' is defined but never used.","'loginUser' is defined but never used.","'logoutUser' is defined but never used.","'sessionActions' is defined but never used.","'restoreCSRF' is defined but never used.","'response' is assigned a value but never used.","'RECEIVE_USER_ORDERS' is assigned a value but never used.","'textFieldTitle' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-whitespace-before-property","Unexpected whitespace before property organizedEvents.","MemberExpression","unexpectedWhitespace",{"range":"213","text":"214"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentUserId' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["215"],"'current_user' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'eventId'. Either include them or remove the dependency array.",["216"],"'errors' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["217"],["218"],"'Link' is defined but never used.",["219"],"React Hook useEffect has a missing dependency: 'handlePlusMinusClick'. Either include it or remove the dependency array.",["220"],"'useEffect' is defined but never used.","'currentUser' is assigned a value but never used.","'allEvents' is assigned a value but never used.",["221"],"'eventActions' is defined but never used.",["222"],"'useHistory' is defined but never used.",["223"],[668,671],"?.",{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"224","fix":"230"},{"desc":"226","fix":"231"},{"desc":"232","fix":"233"},{"desc":"224","fix":"234"},{"desc":"224","fix":"235"},{"desc":"224","fix":"236"},"Update the dependencies array to be: [currentUserId, dispatch]",{"range":"237","text":"238"},"Update the dependencies array to be: [dispatch, eventId]",{"range":"239","text":"240"},"Update the dependencies array to be: [dispatch]",{"range":"241","text":"242"},{"range":"243","text":"238"},{"range":"244","text":"240"},"Update the dependencies array to be: [handlePlusMinusClick, numTickets]",{"range":"245","text":"246"},{"range":"247","text":"238"},{"range":"248","text":"238"},{"range":"249","text":"238"},[1075,1077],"[currentUserId, dispatch]",[998,1000],"[dispatch, eventId]",[535,537],"[dispatch]",[973,975],[1129,1131],[2100,2112],"[handlePlusMinusClick, numTickets]",[865,867],[962,964],[1052,1054]]