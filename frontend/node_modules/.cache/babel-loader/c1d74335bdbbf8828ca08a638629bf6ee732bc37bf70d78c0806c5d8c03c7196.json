{"ast":null,"code":"import { csrfFetch } from \"./csrf\";\nconst SET_CURRENT_USER = 'session/setCurrentUser';\nconst REMOVE_CURRENT_USER = 'session/removeCurrentUser';\nconst setCurrentUser = user => ({\n  type: SET_CURRENT_USER,\n  payload: user\n});\nconst removeCurrentUser = () => ({\n  type: REMOVE_CURRENT_USER\n});\nconst storeCSRFToken = response => {\n  const csrfToken = response.headers.get(\"X-CSRF-Token\");\n  if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n};\nconst storeCurrentUser = user => {\n  if (user) sessionStorage.setItem(\"currentUser\", JSON.stringify(user));else sessionStorage.removeItem(\"currentUser\");\n};\nexport const login = ({\n  credential,\n  password\n}) => async dispatch => {\n  const response = await csrfFetch(\"/api/session\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      credential,\n      password\n    })\n  });\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  debugger;\n  dispatch(setCurrentUser(data.user));\n  return response;\n};\nexport const restoreSession = async dispatch => {\n  let res = await csrfFetch('/api/session');\n  storeCSRFToken(res);\n  let data = await res.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return res;\n};\nexport const logout = () => async dispatch => {\n  const response = await csrfFetch('/api/session', {\n    method: 'DELETE'\n  });\n  storeCurrentUser(null);\n  console.log(response);\n  dispatch(removeCurrentUser());\n  return response;\n};\nexport const signup = user => async dispatch => {\n  const {\n    firstName,\n    lastName,\n    email,\n    password\n  } = user;\n  const response = await csrfFetch('api/users', {\n    method: 'POST',\n    body: JSON.stringify({\n      firstName,\n      lastName,\n      email,\n      password\n    })\n  });\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  dispatch(setCurrentUser(data.user));\n  return response;\n};\nconst initialState = {\n  user: JSON.parse(sessionStorage.getItem('currentUser'))\n};\nconst sessionReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return {\n        ...state,\n        user: action.payload\n      };\n    case REMOVE_CURRENT_USER:\n      return {\n        ...state,\n        user: null\n      };\n    default:\n      return state;\n  }\n};\nexport default sessionReducer;","map":{"version":3,"names":["csrfFetch","SET_CURRENT_USER","REMOVE_CURRENT_USER","setCurrentUser","user","type","payload","removeCurrentUser","storeCSRFToken","response","csrfToken","headers","get","sessionStorage","setItem","storeCurrentUser","JSON","stringify","removeItem","login","credential","password","dispatch","method","body","data","json","restoreSession","res","logout","console","log","signup","firstName","lastName","email","initialState","parse","getItem","sessionReducer","state","action"],"sources":["/Users/joerandazzo/Documents/App Academy/aA Projects/Eventbite2/eventbite/frontend/src/store/sessionReducer.js"],"sourcesContent":["import { csrfFetch } from \"./csrf\"\n\nconst SET_CURRENT_USER = 'session/setCurrentUser'\nconst REMOVE_CURRENT_USER = 'session/removeCurrentUser'\n\nconst setCurrentUser = (user) => ({\n    type: SET_CURRENT_USER,\n    payload: user\n});\n  \nconst removeCurrentUser = () => ({\n    type: REMOVE_CURRENT_USER\n});\n\nconst storeCSRFToken = response => {\n    const csrfToken = response.headers.get(\"X-CSRF-Token\");\n    if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n}\n  \nconst storeCurrentUser = user => {\n    if (user) sessionStorage.setItem(\"currentUser\", JSON.stringify(user));\n    else sessionStorage.removeItem(\"currentUser\");\n}\n\nexport const login = ({ credential, password }) => async dispatch => {\n    const response = await csrfFetch(\"/api/session\", {\n      method: \"POST\",\n      body: JSON.stringify({ credential, password })\n    });\n    const data = await response.json();\n    storeCurrentUser(data.user);\n    debugger\n    dispatch(setCurrentUser(data.user));\n    return response;\n};\n\nexport const restoreSession = async dispatch => {\n    let res = await csrfFetch('/api/session');\n    storeCSRFToken(res);\n    let data = await res.json();\n    storeCurrentUser(data.user);\n    dispatch(setCurrentUser(data.user));\n    return res;\n}\n\nexport const logout = () => async dispatch => {\n    const response = await csrfFetch('/api/session', {\n        method: 'DELETE'\n    });\n    storeCurrentUser(null);\n    console.log(response)\n    dispatch(removeCurrentUser());\n    return response;\n};\n\nexport const signup = user => async dispatch => {\n    const {firstName, lastName, email, password} = user;\n    const response = await csrfFetch('api/users', {\n        method: 'POST',\n        body: JSON.stringify({\n            firstName,\n            lastName,\n            email,\n            password\n        })\n    });\n    const data = await response.json();\n    storeCurrentUser(data.user);\n    dispatch(setCurrentUser(data.user));\n    return response;\n};\n\nconst initialState = {\n    user: JSON.parse(sessionStorage.getItem('currentUser'))\n};\n\nconst sessionReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return {...state, user: action.payload};\n        case REMOVE_CURRENT_USER:\n            return {...state, user: null};\n        default:\n            return state;\n    }\n};\n\nexport default sessionReducer\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}