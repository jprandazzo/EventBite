exit
c
n
c
n
c
n
c
n
disp order
c
Event.count-1
disp user_id
disp event_id
c
Event.count
params
c
event_id
watch event_id
c
event_id
Event.count
Event.all.map(&:id)
Event.all.map(&:title)
Event.where.not(organizer_id: user_id).map(&:id)
exit
params
order
n
c
n
Event.find(10)
order
n
c
exit
Event.find(1)
Event.find(1).photo.url
Event.first
c
n
exit
params[:num_tickets]
params.num_tickets
params
order
order.num_tickets
event && event.capacity >= order.num_tickets
n
Event.find(20)
Event.find(20
order.event_id
order.valid?
n
c
n
quit
reload!
Order.create!({
    event_id: 20,
    ticketholder_id: 1,
    num_tickets: 2
    })
Event.find(20).orders
Event.find(20)
Event.find(20).capacity
3.times do 
    Order.create!({
    event_id: 20,
    ticketholder_id: 1,
    num_tickets: 2
    })
end
3.times do 
    Order.create!({
    event_id: 1,
    ticketholder_id: 20,
    num_tickets: 2
    })
end
order.valid?
n
c
n
params
c
n
c
order.valid?
n
c
n
c
n
order
c
exit
params[:string]
exit
c
exit
c
params[:price]
c
exit
!string
!!string
string
@events
n
@events
string
n
string
n
@events
events
price
string
n
price
string
c
params[:price]
exit
params[:price]
params[:price] == 'free'
params[:price]
exit
params[:price]
c
@user.errors.full_messages
c
@user.errors.full_messages
c
params
exit
params
exit
params
exit
@event
@order
n
@event.capacity >= @order.num_tickets
@event
c
db_like
n
nn
db_liken
browser_like
n
browser_like
c
heart_react_item
exit
browser_like
heart_react_item
c
browser_like.valid?
heart_react_item
browser_like
exit
user_likes_in_db_only
user_likes_in_browser_only
c
@user.likes
user_likes_in_browser
user_likes_in_browser_only
user_likes_in_db_only
user_lines_in_db_only
c
user_likes_in_browser_only
@user.likes.count
@user.likes
Like.create!(event_id: 14, liker_id: 2)
Like.create!(event_id: 2, liker_id: 2)
like.create
like.valid?
like = user_likes_in_browser_only[0]
user_likes_in_browser_only
like
like1
lik1
@user.likes
@user
n
like.valid?
like = user_likes_in_browser_only[0]
s
n
user_likes_in_browser_only
n
cn
c
n
c
user_likes_in_db_only
exit
user_likes_in_db_only
user_likes_in_browser_only
c
n
c
n
nn
n
db_like.event_id == browser_like.event_id && db_like.liker_id == browser_like.liker_id
browser_like
db_like
n
s
c
exit
@user.likes.reject{|like| like.event_id == 14}
@user.likes.reject{|like| like.event_id: 14}
@user.likes.reject{|event| event_id: 14}
@user.likes.reject(|event| event_id: 14)
@user.likes
n
c
n
c
exit
user_likes_in_db_only
n
(db_like.event_id == browser_like.event_id && db_like.liker_id == browser_like.liker_id)
n
user_likes_in_db_only
db_like
n
db_like.event_id == browser_like.event_id && db_like.liker_id == browser_like.liker_id
db_like.event_id == browser_like.event_id && db_like.liker_id == browser_like.liker_id)
db_like.liker_id == browser_like.liker_id
(db_like.event_id == browser_like.event_id)
db_like
browser_like
c
exit
@user.likes
user_likes_in_browser
user_likes_in_browser_only
user_likes_in_db_only
c
user_likes_in_browser_only
user_likes_in_db_only
c
exit
@user.likes
user_likes_in_browser.reject{|like| !!Like.where(liker_id: like.liker_id, event_id: like.event_id)}
user_likes_in_browser.reject{|like| Like.exists?(liker_id: like.liker_id, event_id: like.event_id)}
Like.exists?(liker_id: like1.liker_id, event_id: like1.event_id)
like1.event_id
like1.liker_id
