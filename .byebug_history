c
@user.attending_events.map(&:id)
@user.attending_events
c
@user_organized_events[0].id
@user_organized_events
c
@user_orders[0].num_tickets
@user_orders[0].ticketholder_id
@user_orders[0].event_id
@user_orders[0]
@user_orders
c
@user_attending_events
c
rails s
exit
Event.joins(:orders).where(orders: {ticketholder_id: @user.id}).distinct
Event.joins(:orders).where(orders: {ticketholder_id: self.id}).distinct
Event.joins(:orders).where(orders: {ticketholder_id: @user.id})
@user
user
self
Event.joins(:orders).where(orders: {ticketholder_id: self.id})
@user_attending_events
@user_orders
c
self.orders
Event.joins(:orders).where(orders: {ticketholder_id: self.id})
c
Order.where(ticketholder_id: self.id)
self.orders
self.attending_events
self.organized_events
self
exit
self.organized_events
self
self.organized_events
self.organizer_events
user.organized_events
user.orders
user = User.find(1)
self.orders
user
self.orders
self
@user
Event.joins(:orders).where(orders: {ticketholder_id: self.id})
c
@user.attending_events
Event.where(organizer_id: @user.id)
@user
c
self
c
exit
reload!
u.generate_session_token
Event.joins(:orders).where(orders: {ticketholder_id: 1})
Order.where(ticketholder_id: 1)
u.attending_events
reload!
u.attending_events
reload!
relaod!
u.id
Event.joins(:orders).where(orders: {ticketholder_id: 1})
u.attending_events
u = User.find(1)
u.attending_events
reload!
u.attending_events
u = User.find(1)
u.attending_events
u
reload!
u = User.find(1)
u
Event.joins(:orders).where(orders: {ticketholder_id: self.id})
Event.joins(:orders).where(orders: {ticketholder_id: 1})
Event.joins(:orders).where(ticketholder_id: 1)
Event.where('id in (12,13)')
Order.where(ticketholder_id: 1)
Order.all
self.id
se.fid
self
Order.where(id: 4)
Order.find(4)
Order.find(1)
Orders.where('ticketholder_id=1')
Orders.where(ticketholder_id: 1)
Orders.where(ticketholder_id: self.id)
Event.where("events.id in (select event_id from orders where ticketholder_id = 1")
Event.where("id in (select event_id from orders where ticketholder_id = 1")
Order.where("ticketholder_id = #{self.id}").select(:id)
Order.where("ticketholder_id = #{self.id}")
Order.where('ticketholder_id = 1')
Orders.where('ticketholder_id = 1')
Order.where(ticketholder_id: self.id)
Event.where("id in (select event_id from orders where ticketholder_id = 1")
self.id
self
Order.where('ticketholder_id = 1')
Order.where(ticketholder_id: 1).ids
Order.where(ticketholder_id: 1).id
Order.where(ticketholder_id: 1)
self.id
orders
c
reload!
u
reload!
Event.where(ticketholder_id: 1)
id
c
Event.where('id in (12,13)')
Event.where('id = 12')
Event.where('id' = 12)
self.id
c
@event
Order.all
n
@event && @event.capacity >= @order.num_tickets
@event
@order
n
c
n
@order.valid?
@order
n
exit
@order
n
order_params
@order
c
order_params
exit
params
order_params
c
Event.where(ticketholder_id: 2)
@user_ticketed_events
c
@user_organized_events
c
@user_organized_events
exit
@event.organizer_id == current_user.id
c
@event.valid?
c
@event
n
@event
event2
c
@event2
exit
event_params
@event
exit
params
@event
exit
params[:price]
@event.price
c
params[:price]
params[:address]
params
@event.organizer_id == current_user.id
c
n
current_user.id
@event.organizer_id
@event.valid?
@event
c
@event.valid?
c
@event.errors.full_messages
@event
n
@event
n
@event.valid?
@event
@event.organizer_id=1
n
@event
n
c
@event.valid?
@event
c
@event
params
@event
@event.errors.full_messages
n
@event.valid?
@event
n
@event.valid?
@event
n
c
params[:event_type]
@event
@event.organizer_name=params[:organizer_name]
params
@event
n
params
c
@event
c
@event.errors.full_messages
@event
c
@event.valid?
@event
c
s
c
n
attributes
subclass
n
params
s
@event
params
c
@event
c
n
c
json.extract! @user, :id, :email, :first_name, :last_name, :created_at
c
event
obj
c
event.id
event
c
events
c
Event.find(1)
c
json.user do
