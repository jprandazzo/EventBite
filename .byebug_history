exit
c
@events
@events = @events.where('price = 0', "%#{price}")
@events.where("event_category = ?", category)
@events.where("event_category = ?", "%#{category}")
@events
category
Event.where("event_category = 'community_culture'")
Event.first
Event.all
Event.where("event_category == 'community_culture'")
category
c
category
exit
category
c
!!category
params
category
c
User.find(params[:id])
@user
c
params[:id]
c
@user.liked_events
current_user
@user
c
exit
params
c
browser_likes.count
new_likes.count
db_likes.count
likes_to_delete
exit
db_likes.each do |like| p 'hello' end
new_likes.each do |like| p 'hello' end
new_likes
likes_to_delete
exit
db_likes.filter {|like| like.liker_id == 1 && like.event_id == 11}
browser_likes.filter { |like| like.liker_id == 1 && like.event_id == 12}
browser_likes.filter { |like| like.liker_id == 1 && like.event_id == 12|
db_likes
browser_likes
exit
event_id
browser_likes
@user
browser_likes
browser_likes.filter { |like| like.liker_id == 1 && like.event_id == 11}
browser_likes.filter { |like| like.liker_id = 1 && like.event_id = 11}
browser_likes.filter |like| {like.liker_id = 1 && like.event_id = 11}
browser_likes.filter({liker_id: 1, event_id: 11})
browser_likes.where(liker_id: 1, event_id: 11)
browser_likes.count
browser_likes
db_likes.count
db_likes = Like.where(liker_id: @user.id).count
db_likes.count
db_likes
@user.likes.count
@user.likes
@user.id
Like.find_by(liker_id: 1)
db_likes
db_likes.count
@user.likes.count
@user.likes
@user.liked_events
@user
db_likes
db_likes = Like.find_by(liker_id: @user.id)
db_likes = Like.find_by(event_id: browser_like.event_id, liker_id: browser_like.liker_id)
browser_likes
exit
params[:liked_events].map {|eid| Like.find_by(event_id: eid, liker_id: @user.id)}
browser_likes
n
Like.find_by(event_id: 12, liker_id: @user.id)
Like.find_by(event_id: 9, liker_id: @user.id)
params[:liked_events]
params[:liked_events].map {|eid| Like.find_by(event_id: eid, liker_id: @user.id)}
params[:liked_events].map {|eid| Event.find_by(event_id: eid, liker_id: @user.id)}
params[:liked_events]
params
c
params
c
browser_like
db_like
n
c
@user
c
@event.photo.url
@event
exit
@event.photo.url
@event
Event.find(23).photo.url
Event.find(23)
Event.find(1).photo.url
@event.photo.url
@event
c
@event
@event.valid?
c
exit
c
error.options
error.full_message
error
c
error
error_hash
c
error_hash
c
exit
error.attribute
error.full_message
error.full_messages
error
c
@event.errors.each do |error| p error.attribute.to_sym end
@event.errors.each do |error| p error.attribute end
@event.errors[0]
@event.errors
c
@event
c
@event
c
@event.errors.full_messages
c
@event.errors.full_messages
c
@event.valid?
@event
c
exit
c
@event
c
:@generated_attribute_methods
instance_variables
params
event
@event
:capacity
capacity
c
@event.valid?
@event.falid?
event_params
@event
exit
@event.valid?
@event
exit
@event.valid?
@event.title.valid?
@event
event_params
@event_params
@event
exit
event_params
@event
c
event.photo.url
c
params
c
params
c
params
c
params
c
params
c
params[:price]
params
c
exit
Event.find(1).photo.url
exit
c
n
c
n
c
n
c
n
disp order
c
Event.count-1
disp user_id
disp event_id
c
Event.count
params
c
event_id
watch event_id
c
event_id
Event.count
Event.all.map(&:id)
Event.all.map(&:title)
Event.where.not(organizer_id: user_id).map(&:id)
exit
params
order
n
c
n
Event.find(10)
order
n
c
exit
Event.find(1)
Event.find(1).photo.url
Event.first
c
n
exit
params[:num_tickets]
params.num_tickets
params
order
order.num_tickets
event && event.capacity >= order.num_tickets
n
Event.find(20)
Event.find(20
order.event_id
order.valid?
n
c
n
quit
reload!
Order.create!({
    event_id: 20,
    ticketholder_id: 1,
    num_tickets: 2
