[{"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/index.js":"1","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/App.js":"2","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/sessionReducer.js":"3","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/reportWebVitals.js":"4","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/eventsReducer.js":"5","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/usersReducer.js":"6","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/index.js":"7","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/csrf.js":"8","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/users/SignUpForm.js":"9","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/users/OrganizerEventIndex.js":"10","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/EditEvent.js":"11","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/AllEvents.js":"12","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/SplashPage.js":"13","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/ShowEvent.js":"14","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/users/SignInForm.js":"15","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/CreateEvent.js":"16","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/SearchEvents.js":"17","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/errorPages/NotFoundErrorPage.js":"18","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/NavBar/NavBarLoggedIn.js":"19","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/NavBar/NavBarLoggedOut.js":"20","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/ordersReducer.js":"21","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/orders/OrderIndex.js":"22","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/orders/OrderShow.js":"23"},{"size":1680,"mtime":1691002232661,"results":"24","hashOfConfig":"25"},{"size":1900,"mtime":1691002216448,"results":"26","hashOfConfig":"25"},{"size":2680,"mtime":1690835789508,"results":"27","hashOfConfig":"25"},{"size":362,"mtime":1689882403602,"results":"28","hashOfConfig":"25"},{"size":2686,"mtime":1690931176909,"results":"29","hashOfConfig":"25"},{"size":2033,"mtime":1691014309119,"results":"30","hashOfConfig":"25"},{"size":873,"mtime":1691002199872,"results":"31","hashOfConfig":"25"},{"size":568,"mtime":1690693397997,"results":"32","hashOfConfig":"25"},{"size":6734,"mtime":1691001912779,"results":"33","hashOfConfig":"25"},{"size":7801,"mtime":1690981625112,"results":"34","hashOfConfig":"25"},{"size":28426,"mtime":1690931793076,"results":"35","hashOfConfig":"25"},{"size":1468,"mtime":1690668196183,"results":"36","hashOfConfig":"25"},{"size":1758,"mtime":1690913204666,"results":"37","hashOfConfig":"25"},{"size":12441,"mtime":1691013825233,"results":"38","hashOfConfig":"25"},{"size":6709,"mtime":1690999814174,"results":"39","hashOfConfig":"25"},{"size":26436,"mtime":1690981942616,"results":"40","hashOfConfig":"25"},{"size":1321,"mtime":1690810855940,"results":"41","hashOfConfig":"25"},{"size":299,"mtime":1690576131976,"results":"42","hashOfConfig":"25"},{"size":7668,"mtime":1690928260265,"results":"43","hashOfConfig":"25"},{"size":5742,"mtime":1690928273010,"results":"44","hashOfConfig":"25"},{"size":2011,"mtime":1690700039135,"results":"45","hashOfConfig":"25"},{"size":2321,"mtime":1690705125793,"results":"46","hashOfConfig":"25"},{"size":2483,"mtime":1690707254306,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"rxi2wg",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"55"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"82","usedDeprecatedRules":"55"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"55"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"55"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"55"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"55"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"55"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"55"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"55"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"55"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"55"},"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/index.js",["131","132","133","134","135"],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/App.js",["136"],[],"import './App.css';\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport SignUpForm from './components/users/SignUpForm';\nimport SignInForm from './components/users/SignInForm';\nimport SplashPage from './components/events/SplashPage';\nimport SearchEvents from './components/events/SearchEvents';\nimport CreateEvent from './components/events/CreateEvent';\nimport EditEvent from './components/events/EditEvent';\nimport AllEvents from './components/events/AllEvents';\nimport ShowEvent from './components/events/ShowEvent';\nimport OrderIndex from './components/orders/OrderIndex';\nimport OrderShow from './components/orders/OrderShow';\nimport OrganizerEventIndex from './components/users/OrganizerEventIndex';\nimport * as sessionActions from './store/sessionReducer';\n\nfunction App() {\n  return (\n    <>\n\n      <Switch>\n        <Route exact path=\"/\" component={SplashPage} />\n        <Route path='/all-events' component={AllEvents} />\n        <Route path=\"/signup\" component={SignUpForm} /> \n        <Route path=\"/signin\" component={SignInForm} />\n        <Route path=\"/organizer/events\" component={OrganizerEventIndex} />\n        <Route path='/events/create' component={CreateEvent} /> \n        <Route path='/events/:eventId/edit' component={EditEvent} /> \n        <Route path='/events/search' component={SearchEvents} />\n        <Route path='/events/:eventId' component={ShowEvent} />\n        <Route path='/user/:userId' component={OrderIndex} />\n        <Route path='/orders/:orderId' component={OrderShow} />\n        \n        {/* <Route path='' */}\n        {/* <Route path=\"/signin\"> <SignUpForm /> </Route> */}\n\n        {/*<Route path=\"/events/new\" component={EventForm} />\n        <Route exact path=\"/events/:eventId\" component={EventShow} />\n        <Route path=\"/events/:eventId/edit\" component={EventForm} /> */}\n      </Switch>\n    </>\n  );\n}\n\nexport default App;",[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/sessionReducer.js",["137"],[],"import csrfFetch from \"./csrf\"\n\nconst SET_CURRENT_USER = 'session/setCurrentUser'\nconst REMOVE_CURRENT_USER = 'session/removeCurrentUser'\nconst RECEIVE_USER = 'receiveUser'\n\nconst setCurrentUser = (user) => ({\n    type: SET_CURRENT_USER,\n    payload: user\n});\n  \nconst removeCurrentUser = () => ({\n    type: REMOVE_CURRENT_USER\n});\n\nexport const getCurrentUser = (state) => {\n    return state.session.user ? state.session.user : null\n}\n\nconst storeCSRFToken = response => {\n    const csrfToken = response.headers.get(\"X-CSRF-Token\");\n    if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n}\n\nasync function restoreCSRF () {\n    const response = await csrfFetch(\"/api/session\");\n    storeCSRFToken(response)\n    return response\n}\n  \nconst storeCurrentUser = user => {\n    if (user) sessionStorage.setItem(\"currentUser\", JSON.stringify(user));\n    else sessionStorage.removeItem(\"currentUser\");\n}\n\nexport const login = ({ email, password }) => async dispatch => {\n    const response = await csrfFetch(\"/api/session\", {\n      method: \"POST\",\n      body: JSON.stringify({ email, password })\n    });\n    const data = await response.json();\n    \n    storeCurrentUser(data.user);\n    dispatch(setCurrentUser(data.user))\n    dispatch({\n        type: RECEIVE_USER,\n        user: data.user\n    })\n    return response;\n};\n\nexport const restoreSession = () => async dispatch => {\n    let res = await csrfFetch('/api/session');\n    storeCSRFToken(res);\n    let data = await res.json();\n    storeCurrentUser(data.user);\n    dispatch(setCurrentUser(data.user));\n    return res;\n}\n\nexport const logout = () => async dispatch => {\n    const response = await csrfFetch('/api/session', {\n        method: 'DELETE'\n    });\n    storeCurrentUser(null);\n    dispatch(removeCurrentUser());\n    return response;\n};\n\nexport const signup = user => async dispatch => {\n    const {firstName, lastName, email, password} = user;\n    const response = await csrfFetch('api/users', {\n        method: \"POST\",\n        body: JSON.stringify({\n            firstName,\n            lastName,\n            email,\n            password\n        })\n    });\n    const data = await response.json();\n\n    storeCurrentUser(data.user);\n    dispatch(setCurrentUser(data.user));\n    return response;\n};\n\nconst initialState = {\n    user: JSON.parse(sessionStorage.getItem('currentUser'))\n};\n\nconst sessionReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return {...state, user: action.payload};\n        case REMOVE_CURRENT_USER:\n            return {...state, user: null};\n        default:\n            return state;\n    }\n};\n\nexport default sessionReducer\n","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/reportWebVitals.js",[],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/eventsReducer.js",["138"],[],"import csrfFetch from \"./csrf\";\n\nconst RECEIVE_EVENT = 'events/receiveEvent'\nconst RECEIVE_EVENTS = 'events/receiveEvents'\nconst REMOVE_EVENT = 'events/removeEvent'\nconst RECEIVE_USER_EVENTS = 'receiveUserEvents'\n\n// get events from store\nexport const getEvents = (state) => {\n    return state && state.events ? Object.values(state.events) : []\n}\n\nexport const getEvent = (eventId) => state => {\n    return state.events ? state.events[eventId] : null\n}\n\n// dispatch actions\n\nexport const fetchEvents = () => async dispatch => {\n    const response = await fetch('/api/events')\n    const data = await response.json()\n\n    dispatch({\n        type: RECEIVE_EVENTS,\n        events: data.events\n    })\n}\n\nexport const fetchEvent = (eventId) => async dispatch => {\n    const response = await fetch(`/api/events/${eventId}`)\n    const data = await response.json();\n\n    if (response.ok) {\n        dispatch({\n            type: RECEIVE_EVENT,\n            event: data.event\n        })\n    }\n    return [data.event, true]\n}\n\nexport const createEvent = (event) => async dispatch => {\n    const response = await csrfFetch(`/api/events/`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(event)\n    })\n    const data = await response.json();\n    debugger\n\n    dispatch({\n        type: RECEIVE_EVENT,\n        event: data.event\n    })\n}\n\nexport const updateEvent = (event) => async dispatch => {\n    const response = await csrfFetch(`/api/events/${event.id}`, {\n        method: 'PATCH',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(event)\n    })\n    const data = await response.json();\n    debugger\n    dispatch({\n        type: RECEIVE_EVENT,\n        event: data.event\n    })\n}\n\nexport const deleteEvent = (eventId) => async dispatch => {\n    const response = await csrfFetch(`/api/events/${eventId}`, {\n        method: 'DELETE',\n        headers: {'Content-Type': 'application/json'},\n    })\n\n    dispatch({\n        type: REMOVE_EVENT,\n        eventId: eventId\n    })\n}\n\nconst eventsReducer = (oldState = {}, action) => {\n    let newState = {...oldState}\n    switch (action.type) {\n        case RECEIVE_EVENTS:    \n            newState = {...oldState,...action.events}\n            return newState\n        case RECEIVE_EVENT:\n            newState[action.event.id] = action.event\n            return newState\n        case RECEIVE_USER_EVENTS:\n            newState = {...oldState,...action.events}\n            return newState\n        case REMOVE_EVENT:\n            delete newState[action.eventId]\n            return newState\n        default:\n            return oldState\n    }\n}\n\nexport default eventsReducer","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/usersReducer.js",["139"],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/index.js",[],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/csrf.js",[],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/users/SignUpForm.js",["140","141"],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/users/OrganizerEventIndex.js",["142","143","144"],[],"import NavBarLoggedIn from \"../NavBar/NavBarLoggedIn\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport moment from 'moment-timezone';\nimport { useEffect } from \"react\";\nimport Grid from '@react-css/grid'\nimport * as sessionActions from '../../store/sessionReducer'\nimport * as userActions from '../../store/usersReducer'\nimport * as eventActions from '../../store/eventsReducer'\nimport \"./OrganizerEventIndex.css\"\n\nexport default function OrganizerEventIndex () {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const currentUserId = useSelector(sessionActions.getCurrentUser)?.id\n    const currentUser = useSelector(userActions.getUser(currentUserId))\n    const organizerEventIds = currentUser ?.organizedEvents\n    const allEvents = Array.from(useSelector(eventActions.getEvents))\n    const currentUserOrganizedEvents = organizerEventIds ? allEvents.filter(el => organizerEventIds.includes(el.id)) : null\n    \n    const gridHeaderText=['Event','','','Sold','Gross','']\n    const gridHeaderClasses=['event','photo','info-description','sold','gross','edit-delete']\n\n    useEffect(() =>{\n        let getData = setTimeout(() => {\n            dispatch(userActions.fetchUserEvents(currentUserId));\n          }, 0)\n        return () => clearTimeout(getData)\n    }, [])\n\n    const focusInput = (e) => {\n        //whichever div is clicked, find its input and focus it\n\n        if (e.target.className === 'organizer-index-search-box' || e.target.className === 'organizer-index-search-create') {\n            let input = e.target.querySelector('.organizer-index-search-input')\n            input.focus()\n        } else if (e.target.className === 'organizer-index-search-input') {\n            e.target.focus()\n        }\n    }\n\n    function setClosestDivsActive(e){\n            let outerDiv = e.target.closest('div')\n            outerDiv.classList.add('active-div')\n\n            // let textFieldTitle = outerDiv.querySelector('.create-event-field-text')\n            // textFieldTitle.classList.add('active-field')\n    }\n\n    function setClosestDivsInactive(e) {\n        //remove 'focus' class from both surrounding divs of the input\n        //that was blurred\n        let outerDiv = e.target.closest('div')\n        outerDiv.classList.remove('active-div')\n        // let textFieldTitle = Array.from(outerDiv.childNodes)[0]\n        // textFieldTitle.classList.remove('active-field')\n    }\n\n    const toggleHide = e => {\n        debugger\n        if (['svg', 'path'].includes(e.target.nodeName.toLowerCase())) {\n            debugger\n            let closest = e.target.closest('div')\n            closest.querySelector('.edit-delete-dropdown-content').classList.toggle('hidden')\n        }\n    }\n\n    const handleDeleteEvent = (eventId) =>{\n        debugger\n        return dispatch(eventActions.deleteEvent(eventId))\n    }\n\n    return(\n        <>\n        <NavBarLoggedIn />\n        <main className='organizer-index-centered'>\n            <h1 className='organizer-index-h1'>Events</h1>\n            \n            <div className='organizer-index-search-create'> \n                <div className='organizer-index-search-box' onClick={(e)=>focusInput(e)}>\n                    <div id='organizer-index-search-button'>\n                        <svg id=\"organizer-index-magnifying-glass\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"magnifying-glass-chunky_svg__eds-icon--magnifying-glass-chunky_base\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M10 14c2.2 0 4-1.8 4-4s-1.8-4-4-4-4 1.8-4 4 1.8 4 4 4zm3.5.9c-1 .7-2.2 1.1-3.5 1.1-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6c0 1.3-.4 2.5-1.1 3.4l5.1 5.1-1.5 1.5-5-5.1z\"></path></svg>\n                    </div>\n                    <input className='organizer-index-search-input' placeholder='Find your dark event' onFocus={(e)=>setClosestDivsActive(e)} onBlur={(e)=>setClosestDivsInactive(e)}/>\n                </div>\n                <div className='organizer-index-create-button' onClick={()=>history.push('/events/create')}>\n                    Create Event\n                </div>\n            </div>\n\n            <div className='organizer-index-table'>\n                <div className='organizer-index-table-headers'>\n                    {gridHeaderText.map((e,i) =>{\n                        return(\n                            <div className={`column-${i+1} row-1 header-${gridHeaderClasses[i]}`}>{e ? e : ''}</div>\n                        )\n                    })}\n                </div>\n                {currentUserOrganizedEvents?.map((e,i) =>{\n                    return(\n                            <div className={`organizer-index-table-row`}>\n                                <Link to={`/events/${e.id}`}>\n                                <div className={`column-1 row-${i+2}`}>\n                                    <div className='event-grid-date-month'>{moment(e.timestampStart).format('MMM')}</div>\n                                    <div className='event-grid-date-day'>{moment(e.timestampStart).format('d')}</div>\n                                </div>\n\n                                <div className={`column-2 row-${i+2}`}>\n                                    <div className='event-grid-photo'>photo</div>\n                                </div>\n\n                                <div className={`column-3 row-${i+2}`}>\n                                    <div className='event-grid-title'>{e.title}</div>\n                                    <div className='event-grid-venue'>{e.venueName}</div>\n                                    <div className='event-grid-date-detailed'>{`${moment(e.timestampStart).format('dddd, MMMM d, YYYY')} at ${moment(e.timestampStart).format('h:MM A')}`}</div>\n                                </div>\n\n                                <div className={`column-4 row-${i+2}`}>\n                                    <div className='event-sold'>{`${e.tixSold ? e.tixSold : 0} / ${e.capacity}`}</div>\n                                </div>\n\n                                <div className={`column-5 row-${i+2}`}>\n                                    <div className='event-gross'>{`$${(e.price * e.tixSold ? e.tixSold : 0).toFixed(2)}`}</div>\n                                </div>\n                                </Link>\n\n                                <div className={`column-6 row-${i+2}`}>\n                                    <div className='edit-delete-dropdown' onClick={(e)=>toggleHide(e)}>\n                                        <svg id=\"vertical-dots-chunky\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"vertical-dots-chunky_svg__eds-icon--vertical-dots-chunky_dot_2\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M10 18c0-1.1.9-2 2-2s2 .9 2 2-.9 2-2 2-2-.9-2-2z\"></path><circle id=\"vertical-dots-chunky_svg__eds-icon--vertical-dots-chunky_dot\" fillRule=\"evenodd\" clipRule=\"evenodd\" cx=\"12\" cy=\"12\" r=\"2\"></circle><circle id=\"vertical-dots-chunky_svg__eds-icon--vertical-dots-chunky_dot_1\" fillRule=\"evenodd\" clipRule=\"evenodd\" cx=\"12\" cy=\"6\" r=\"2\"></circle></svg>\n                                        <div className='edit-delete-dropdown-content hidden'>\n                                            <Link to={`/events/${e.id}`}><div className='ed-dropdown-content-text-box'>View</div></Link>\n                                            <Link to={`/events/${e.id}/edit`}><div className='ed-dropdown-content-text-box'>Edit</div></Link>\n                                            <div className='ed-dropdown-content-text-box' onClick={()=>handleDeleteEvent(e.id)}>Delete</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                    )\n                })}\n                \n            </div>\n\n            \n\n\n        </main>\n        </>\n    )\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/EditEvent.js",["145","146"],[],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Calendar from 'react-calendar';\nimport moment from 'moment-timezone';\nimport { useHistory, Link, useParams } from 'react-router-dom';\nimport * as eventActions from \"../../store/eventsReducer\";\nimport * as sessionActions from '../../store/sessionReducer';\nimport * as userActions from '../../store/usersReducer';\nimport NavBarLoggedIn from \"../NavBar/NavBarLoggedIn\";\nimport './CreateEvent.css';\n\nexport default function CreateEvent () {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const {eventId} = useParams();\n    const [prevEvent,setPrevEvent] = useState({})\n    const currentUser = useSelector(sessionActions.getCurrentUser)\n\n    useEffect(() =>{\n        const awaitFetchBeforeLoading = async () => {\n            const res = await dispatch(userActions.fetchUserEvents(currentUser.id));\n            setPrevEvent(res.events[eventId])\n        }\n        awaitFetchBeforeLoading()   \n    }, [])\n\n    useEffect(()=>{\n        setTitle(prevEvent.title);\n        setOrganizerName(prevEvent.organizerName);\n        setEventType(prevEvent.eventType);\n        setEventCategory(prevEvent.eventCategory);\n        setAddress(prevEvent.address);\n        setVenueName(prevEvent.venueName);\n        setEventStartDate(moment(prevEvent.timestampStart).format('YYYY-MM-DD'))\n        setEventStartTime(moment(prevEvent.timestampStart).format('h:mm A'))\n        setEventEndDate(moment(prevEvent.timestampEnd).format('YYYY-MM-DD'))\n        setEventEndTime(moment(prevEvent.timestampEnd).format('h:mm A'))\n        setCapacity(prevEvent.capacity);\n        setPrice(prevEvent.price);\n        setDescription(prevEvent.description);\n    }, [prevEvent])\n\n    const [title, setTitle] = useState('')\n    const [organizerName, setOrganizerName] = useState('')\n    const [eventType, setEventType] = useState('')\n    const [eventCategory, setEventCategory] = useState('')\n    const [venueName, setVenueName] = useState('')\n    const [address, setAddress] = useState('')\n    const [eventStartDate, setEventStartDate] = useState(moment(moment(prevEvent?.timestampStart).tz(\"America/New_York\")).format('MM/DD/YYYY'))\n    const [eventStartTime, setEventStartTime] = useState(moment(moment(prevEvent?.timestampStart).tz(\"America/New_York\")).format('h:mm A'))\n    const [eventEndDate, setEventEndDate] = useState(moment(moment(prevEvent?.timestampEnd).tz(\"America/New_York\")).format('MM/DD/YYYY'))\n    const [eventEndTime, setEventEndTime] = useState(moment(moment(prevEvent?.timestampEnd).tz(\"America/New_York\")).format('h:mm A'))\n    const [capacity, setCapacity] = useState('')\n    const [errors, setErrors] = useState([]);\n    const [price, setPrice] = useState('');\n    const [description, setDescription] = useState('');\n    const [startCalActive, setStartCalActive] = useState('');\n    const [endCalActive, setEndCalActive] = useState('');\n    \n    const eventTypes = [\n        {value: null, display: 'Type'},\n        {value: 'attraction', display: 'Attraction'},\n        {value: 'camp_trip_retreat', display: 'Camp/Trip/Retreat'},\n        {value: 'concert_performance', display: 'Concert/Performance'},\n        {value: 'conference', display: \"Conference\"},\n        {value: 'convention', display: 'Convention'},\n        {value: 'dinner_gala', display: 'Dinner/Gala'},\n        {value: 'festival_fair', display: 'Festival/Fair'},\n        {value: 'party_social_gathering', display: 'Party/Social Gathering'},\n        {value: 'type_other', display: \"Other\"}\n    ]\n\n    const eventCategories = [\n        {value: null, display: 'Category'},\n        {value: 'community_culture', display: 'Community/Culture'},\n        {value: 'fashion_beauty', display: 'Fashion/Beauty'},\n        {value: 'film_media_entertainment', display: 'Film/Media/Entertainment'},\n        {value: 'food_drink', display: 'Food/Drink'},\n        {value: 'music', display: 'Music'},\n        {value: 'category_other', display: 'Other'},\n        {value: 'travel_outdoor', display: 'Travel/Outdoor'}\n    ]\n\n    const setVenueAndAddress = (e) =>{\n        setVenueName(e.target.value)\n        setAddress(e.target.value)\n    }\n    const focusInput = (e) => {\n        //blur anything that's currently focused\n        Array.from(document.querySelectorAll('.create-event-field-input'))\n            .forEach(el => {\n                el.blur()\n            })\n        \n        //whichever div is clicked, find its input and focus it\n        if (e.target.className === 'create-event-field-box') {\n            let input = e.target.querySelector('.create-event-field-input')\n            input.focus()\n        } else if (e.target.className === 'create-event-field-text') {\n\n            let outerDiv = e.target.parentNode\n            let input = outerDiv.querySelector('.create-event-field-input')\n            input.focus()\n\n        } else if (e.target.className === 'create-event-field-input') {\n            e.target.focus()\n        }\n    }\n\n    function setClosestDivsActive(e){\n        //add 'focus' class to both surrounding divs of the input\n        //that was focused\n        if (Array.from(document.querySelector('.event-start-date-button').querySelectorAll('*')).includes(e.target)\n            || Array.from(document.querySelector('.event-end-date-button').querySelectorAll('*')).includes(e.target)\n            ) {\n            return;\n        }\n\n        if (e.target.closest('div').classList.contains('create-event-field-text')) {\n            let outerDiv = e.target.closest('div').parentNode\n            outerDiv.classList.add('active-div')\n\n            let textFieldTitle = outerDiv.querySelector('.create-event-field-text')\n            textFieldTitle.classList.add('active-field')\n        } else if (e.target.closest('div').classList.contains('create-event-field-box')) {\n            let outerDiv = e.target.closest('div')\n            outerDiv.classList.add('active-div')\n\n            let textFieldTitle = outerDiv.querySelector('.create-event-field-text')\n            textFieldTitle?.classList.add('active-field')\n        }\n\n    }\n\n    function setClosestDivsInactive(e) {\n        //remove 'focus' class from both surrounding divs of the input\n        //that was blurred\n        let outerDiv = e.target.closest('div')\n        outerDiv.classList.remove('active-div')\n        let textFieldTitle = Array.from(outerDiv.childNodes)[0]\n        textFieldTitle.classList.remove('active-field')\n    }\n\n    const toggleCalendar = (e) =>{\n        e.preventDefault();\n        // debugger\n\n        if ((e.target === document.querySelector('.event-start-date-button') || Array.from(document.querySelector('.event-start-date-button').querySelectorAll('*')).includes(e.target))\n            && !(e.target.classList.contains(\"event-date-value\") \n            || e.target.classList.contains('react-calendar__tile')\n            || e.target.parentNode.classList.contains('react-calendar__tile'))) {\n            setStartCalActive(true)\n        } else if ((e.target === document.querySelector('.event-end-date-button') || Array.from(document.querySelector('.event-end-date-button').querySelectorAll('*')).includes(e.target))\n            && !(e.target.classList.contains(\"event-date-value\") \n            || e.target.classList.contains('react-calendar__tile')\n            || e.target.parentNode.classList.contains('react-calendar__tile'))) {\n            setEndCalActive(true)\n        } else {\n            setStartCalActive(false)\n            setEndCalActive(false)\n        }\n    }\n\n    const handleEdit = () => {\n        let event = {\n            eventId: prevEvent.id,\n            title,\n            organizerName,\n            eventType,\n            eventCategory,\n            venueName,\n            address,\n            timestampStart: moment(`${eventStartDate.toString().slice(0,15)} ${eventStartTime}`).tz('America/New_York').format(),\n            timestampEnd: moment(`${eventEndDate.toString().slice(0,15)} ${eventEndTime}`).tz('America/New_York').format(),\n            capacity,\n            price,\n            description,\n            organizerId: currentUser.id\n        }\n        debugger\n\n        setErrors([])\n        return dispatch(eventActions.updateEvent(event))\n            // .catch(async (res) => {\n            //     let data;\n            //     try {\n            //         data = await res.clone().json();\n            //     } catch {\n            //         data = await res.text();\n            //     }\n            //     if (data?.errors) setErrors(data.errors);\n            //     else if (data) setErrors([data]);\n            //     else setErrors([res.statusText]);\n            // })\n            .then(() =>{history.push(`/organizer/events`)});\n    };\n\n    return (\n        <>\n            {currentUser ? <NavBarLoggedIn /> : <></>}\n            <br /><br />\n            \n            <br />\n            <div id='back-to-organized-events'>\n                <Link to='/organizer/events'><span><svg id=\"chevron-left-chunky_svg__eds-icon--chevron-left-chunky_svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\" ><path id=\"chevron-left-chunky_svg__eds-icon--chevron-left-chunky_base\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M13.8 7l-5 5 5 5 1.4-1.4-3.6-3.6 3.6-3.6z\"></path></svg>\n                Events</span></Link>\n            </div>\n\n            <br /><br/><br/>\n            <form className='centered-create-event' onClick={(e) =>{toggleCalendar(e); focusInput(e)}}>\n                <section id='basic-info'>\n                    <div id='basic-info-description-box'>\n                        <svg id=\"title-edit-svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"title-edit_svg__eds-icon--title-edit_base\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M2 2v3h1V3h5v10H6v1h5v-1H9V3h5v2h1V2H2z\"></path><g id=\"title-edit_svg__eds-icon--title-edit_lines\" fillRule=\"evenodd\" clip-rule=\"evenodd\"><path d=\"M15 9h7v1h-7zM15 13h7v1h-7zM6 17h16v1H6zM6 21h16v1H6z\"></path></g></svg>\n                        <h2 id='basic-info-h2'>Basic Info</h2>\n                        <div id='basic-info-p-container'>\n                            <p>\n                                Name your event and tell event-goers why they should come. Add details that highlight what makes it unique.\n                            </p>\n                        </div>\n                    </div>\n\n                    <div className='create-event-field-box'>\n                        <div className='create-event-field-text'>\n                            Event Title <text style={{ color: 'red' }}>*</text>\n                        </div>\n\n                        <br />\n\n                        <span className='create-event-field-input-box'>\n                            <label>\n                                <input className='create-event-field-input'\n                                    type='text' \n                                    name='title'\n                                    value={title}\n                                    placeholder=\"Be deceptive and misleading. Don't arouse suspicion.\"\n                                    onChange={e => setTitle(e.target.value)}\n                                    onFocus={e => setClosestDivsActive(e)}\n                                    onBlur={e => setClosestDivsInactive(e)}\n                                />\n                            </label>\n                        </span>\n                    </div>\n                    \n                    <div className='create-event-field-box'>\n                        <div className='create-event-field-text'>\n                            Organizer\n                        </div>\n\n                        <br />\n\n                        <span className='create-event-field-input-box'>\n                            <label>\n                                <input className='create-event-field-input'\n                                    type='text' \n                                    name='title'\n                                    placeholder=\"Fake names are fine. Avoid giving out details that could help slayers track us.\"\n                                    value={organizerName}\n                                    onChange={e => setOrganizerName(e.target.value)}\n                                    onFocus={e => setClosestDivsActive(e)}\n                                    onBlur={e => setClosestDivsInactive(e)}\n                                />\n                            </label>\n                        </span>\n                    </div>\n                    <div className='event-type-container'>\n                        <select name='event-type' id=\"event-type-dropdown\" onChange={(e) =>{setEventType(e.target.value)}} defaultValue={eventType}>\n                            {eventTypes.map(type =>{\n                                return (\n                                    <option key={type.value} value={type.value} selected={type.value === prevEvent.eventType ? true : ''}> \n                                        {type.display}\n                                    </option>\n                                )\n                            })}\n                        </select>\n                    </div>\n                    <br/>\n                    <div className='event-category-container'>\n                        <select name='event-category' id=\"event-category-dropdown\" onChange={(e) =>{setEventCategory(e.target.value)}} defaultValue={eventCategories[0]}>\n                            {eventCategories.map(cat =>{\n                                return (\n                                    <option key={cat.value} value={cat.value} selected={cat.value === prevEvent.eventCategory ? true : ''}> \n                                        {cat.display}\n                                    </option>\n                                )\n                            })}\n                        </select>\n                    </div>\n                </section>\n\n                <hr className='create-event-section-division-hr' id='basic-info-location-division-hr'/>\n\n                <section id='Location-box'>\n                    <div className='location-description-box'>\n                        <svg id=\"map_svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M20 3c-1.1 0-2 .9-2 2H2v16h17.8c1.1 0 2.1-.9 2.1-2V5c.1-1.1-.8-2-1.9-2zm-.2 17H3V6h15v13h1c0-.6.4-1 1-1 .5 0 .9.4 1 .9-.1.6-.6 1.1-1.2 1.1zm1.2-2.7c-.3-.2-.6-.3-1-.3s-.7.1-1 .3V5c0-.6.4-1 1-1s1 .4 1 1v12.3z\"></path><path id=\"map_svg__eds-icon--map_cross\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8.8 12.7l.7-.7-1.1-1 1.1-1-.7-.7-1.1 1-1-1-.7.7 1 1-1 1 .7.7 1-1z\"></path><path id=\"map_svg__eds-icon--map_dash_3_\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 10h2v1h-2z\"></path><path id=\"map_svg__eds-icon--map_dash_2_\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15 12h1v2h-1z\"></path><path id=\"map_svg__eds-icon--map_dash_1_\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 15h2v1h-2z\"></path><path id=\"map_svg__eds-icon--map_dash\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8 15h2v1H8z\"></path></svg>\n                        <h2 id='location-h2'>Location</h2>\n                        <div id='location-p-container'>\n                            <p>\n                                Pick a prime spot to amass the largest number of fools you can. The more the bloodier!\n                            </p>\n                        </div>\n                    </div>\n                    <div className='create-event-field-box' id='create-event-venue-box'>\n                        <span className='create-event-field-input-box' id='create-event-venue-input-box'>\n                            <label>\n                                <input className='create-event-field-input'\n                                    id='create-event-venue-input'\n                                    type='text' \n                                    name='venue-name'\n                                    placeholder=\"Open air venues are best - no invitation inside needed. Make sure to check the weather forecast.\"\n                                    value={venueName}\n                                    onChange={e => setVenueAndAddress(e)}\n                                    onFocus={e => setClosestDivsActive(e)}\n                                    onBlur={e => setClosestDivsInactive(e)}\n                                />\n                                <svg id=\"magnifying-glass-venue\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"magnifying-glass-chunky_svg__eds-icon--magnifying-glass-chunky_base\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M10 14c2.2 0 4-1.8 4-4s-1.8-4-4-4-4 1.8-4 4 1.8 4 4 4zm3.5.9c-1 .7-2.2 1.1-3.5 1.1-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6c0 1.3-.4 2.5-1.1 3.4l5.1 5.1-1.5 1.5-5-5.1z\"></path></svg>\n                            </label>\n                        </span>\n                    </div>\n                </section>\n\n                <hr className='create-event-section-division-hr' id='location-date-division-hr'/>\n                \n                <section id='date-and-time'>\n                    <div className='datetime-description-box'>\n                        <svg id=\"calendar_svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"calendar_svg__eds-icon--calendar_base\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M17 4V2h-1v2H8V2H7v2H2v18h20V4h-5zm4 17H3V9h18v12zM3 8V5h4v1h1V5h8v1h1V5h4v3H3z\"></path><g id=\"calendar_svg__eds-icon--calendar_squares\" fillRule=\"evenodd\" clip-rule=\"evenodd\"><path d=\"M15 16h2v2h-2zM11 16h2v2h-2zM7 16h2v2H7zM15 12h2v2h-2zM11 12h2v2h-2zM7 12h2v2H7z\"></path></g></svg>\n                        <h2 id='location-h2'>Date and time</h2>\n                        <div id='location-p-container'>\n                            <p>\n                                Choose a day and time to gather your unsuspecting victims together. Nighttime is usually best, unless you're indoors of course.\n                            </p>\n                        </div>\n                    </div>\n                    \n                    <div className='event-start-box'>\n                        <div className='event-start-date-button timestamp-button'>\n                            <svg id=\"small_calendar_svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"calendar-chunky_svg__eds-icon--calendar-chunky_base\" d=\"M16.9 6.5v-2h-2v2h-6v-2h-2v2h-2v13h14v-13h-2zm0 11h-10v-7h10v7z\"></path></svg>\n                            <div className='event-date-text event-date-text' id='event-start-date-text'>Event Starts</div>\n                            <div className='event-date-value event-date-value' id='event-start-date-value'>{`${moment(eventStartDate).format('MM/DD/YYYY')}`}</div>\n                            <div className='calendar-box' id='event-start-date-box'>\n                                <Calendar className={`calendar-timestamp-start calendar ${startCalActive ? '' : 'hidden'}`} onChange={setEventStartDate} defaultValue={eventStartDate} />\n                            </div>\n                            <br/>\n                        </div>\n\n                        <div className='event-start-time-button timestamp-button' onClick={(e) =>{\n                                    document.querySelector('.event-start-times-dropdown').classList.toggle('hidden');\n                                    document.querySelector('.event-start-times-dropdown').setAttribute('size', 12)}}>\n                            <div className='event-time-text' id='event-start-time-text'>Start Time</div>\n                            <div className='event-time-value' id='event-start-time-value'>{eventStartTime}</div>\n                            <label>\n                                    <select className='event-start-times-dropdown hidden' name='event-start-times' id=\"event-start-times\" onChange={(e) =>{setEventStartTime(e.target.value)}} defaultValue={eventStartTime}>\n                                        {[...Array(48).keys()].map(i =>{\n                                            let time = moment(eventStartDate).startOf('day').add(30*i,'minutes').format('hh:mm A')\n                                            return (\n                                                <option key={i} value={time} > \n                                                    {`${moment(eventStartDate).startOf('day').add(30*i,'minutes').format('hh:mm A')}`}\n                                                </option>\n                                            )\n                                        })}\n                                    </select>\n                            </label>\n                        </div>        \n                    </div>\n\n                    <div className='event-end-container'>\n                        <div className='event-end-date-button timestamp-button'\n                            /*onClick={e => setClosestDivsActive(e)}*/\n                            >\n                            <svg id=\"small_calendar_svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"calendar-chunky_svg__eds-icon--calendar-chunky_base\" d=\"M16.9 6.5v-2h-2v2h-6v-2h-2v2h-2v13h14v-13h-2zm0 11h-10v-7h10v7z\"></path></svg>\n                            <div className='event-date-text' id='event-end-date-text'>Event Ends</div>\n                            <div className='event-date-value' id='event-end-date-value'>{`${moment(eventEndDate).format('MM/DD/YYYY')}`}</div>\n                            <div className='calendar-box' id='event-end-date-box'>\n                                <Calendar className={`calendar-timestamp-end calendar ${endCalActive ? '' : 'hidden'}`} onChange={setEventEndDate} defaultValue={eventEndDate} />\n                            </div>\n                            <br/>\n                        </div>\n                        \n                        <div className='event-end-time-button timestamp-button' onClick={(e) =>{\n                                    document.querySelector('.event-end-times-dropdown').classList.toggle('hidden');\n                                    document.querySelector('.event-end-times-dropdown').setAttribute('size', 12)}}>\n                            <div className='event-time-text' id='event-end-time-text'>Start Time</div>\n                            <div className='event-time-value' id='event-end-time-value'>{eventEndTime}</div>\n                            <label>\n                                    <select className='event-end-times-dropdown hidden' name='event-end-times' id=\"event-end-times\" onChange={(e) =>{setEventEndTime(e.target.value)}} defaultValue={eventEndTime}>\n                                        {[...Array(48).keys()].map(i =>{\n                                            let time = moment(eventEndDate).startOf('day').add(30*i,'minutes').format('hh:mm A')\n                                            return (\n                                                <option key={i} value={time} > \n                                                    {`${moment(eventEndDate).startOf('day').add(30*i,'minutes').format('hh:mm A')}`}\n                                                </option>\n                                            )\n                                        })}\n                                    </select>\n                            </label>\n                            <br/>\n                        </div>\n                    </div>\n                </section>\n                <br/><br/><br/>\n                <hr className='create-event-section-division-hr' id='date-misc-division-hr'/>\n\n                <section id='misc-description'>\n                    <div className='misc-description-box'>\n                        <svg id=\"map_svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M20 3c-1.1 0-2 .9-2 2H2v16h17.8c1.1 0 2.1-.9 2.1-2V5c.1-1.1-.8-2-1.9-2zm-.2 17H3V6h15v13h1c0-.6.4-1 1-1 .5 0 .9.4 1 .9-.1.6-.6 1.1-1.2 1.1zm1.2-2.7c-.3-.2-.6-.3-1-.3s-.7.1-1 .3V5c0-.6.4-1 1-1s1 .4 1 1v12.3z\"></path><path id=\"map_svg__eds-icon--map_cross\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8.8 12.7l.7-.7-1.1-1 1.1-1-.7-.7-1.1 1-1-1-.7.7 1 1-1 1 .7.7 1-1z\"></path><path id=\"map_svg__eds-icon--map_dash_3_\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 10h2v1h-2z\"></path><path id=\"map_svg__eds-icon--map_dash_2_\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15 12h1v2h-1z\"></path><path id=\"map_svg__eds-icon--map_dash_1_\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 15h2v1h-2z\"></path><path id=\"map_svg__eds-icon--map_dash\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8 15h2v1H8z\"></path></svg>\n                        <h2 id='location-h2'>Miscellaneous details</h2>\n                        <div id='location-p-container'>\n                            <p>\n                                Fill in your event with even more misleading details!\n                            </p>\n                        </div>\n                    </div>\n                    <br/><br/>\n                    <div className='create-event-field-box' id='create-event-capacity-box' onClick={(e) =>{focusInput(e)}}>\n                        <div className='create-event-field-text' id='event-capacity-text'>Capacity</div>\n                        <span className='create-event-field-input-box' id='create-event-capacity-input-box'>\n                            <label>\n                                <input className='create-event-field-input'\n                                    id='create-event-capacity-input'\n                                    type='text' \n                                    placeholder=\"How many victims do you plan to invite? Be ambitious!\"\n                                    value={capacity}\n                                    onChange={e => {setCapacity(e.target.value)}}\n                                    onFocus={e => setClosestDivsActive(e)}\n                                    onBlur={e => setClosestDivsInactive(e)}\n                                />\n                            </label>\n                        </span>\n                    </div>\n                    <div className='create-event-field-box' id='create-event-price-box' onClick={(e) =>{focusInput(e)}}>\n                        <div className='create-event-field-text' id='event-price-text'><p>Price<br/>$</p></div>\n                        <span className='create-event-field-input-box' id='create-event-price-input-box'>\n                            <label>\n                                <input className='create-event-field-input'\n                                    id='create-event-price-input'\n                                    type='text' \n                                    placeholder=\"Why not charge people while you feast on them? Kill two bats with one stone.\"\n                                    value={price}\n                                    onChange={e => {setPrice(e.target.value)}}\n                                    onFocus={e => setClosestDivsActive(e)}\n                                    onBlur={e => setClosestDivsInactive(e)}\n                                />\n                            </label>\n                        </span>\n                    </div>\n                    <div className='create-event-field-box' id='create-event-description-box' onClick={(e) =>{focusInput(e)}}>\n                        <div className='create-event-field-text' id='event-description-text'>Description</div>\n                        <span className='create-event-field-input-box' id='create-event-description-input-box'>\n                            <textarea className='create-event-field-input'\n                                id='create-event-description-input'\n                                placeholder=\"Give a fake event description to entice the humans to attend. Be descriptive. Be misleading. Humans are gullible.\"\n                                value={description}\n                                onChange={e => {setDescription(e.target.value)}}\n                                onFocus={e => setClosestDivsActive(e)}\n                                onBlur={e => setClosestDivsInactive(e)}\n                            />\n                        </span>\n                    </div>\n                </section>\n\n                <div className='whitespace' />\n            </form>\n        <div className='create-event-button-box'>\n            <hr id='create-event-bottom-fullscreen-hr' />\n            <button className='create-event-discard-button' onClick={()=>history.goBack()}>Discard</button>\n            <button className='create-event-button' onClick={handleEdit}>Save Changes</button>\n        </div>\n        </>\n    )\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/AllEvents.js",["147"],[],"import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { Link } from \"react-router-dom/\";\nimport * as eventActions from '../../store/eventsReducer'\nimport NavBarLoggedIn from \"../NavBar/NavBarLoggedIn\";\nimport './AllEvents.css'\n\nexport default function AllEvents () {\n    \n    const dispatch = useDispatch();\n    \n    useEffect(() =>{\n        let getData = setTimeout(() => {\n            dispatch(eventActions.fetchEvents());\n          }, 0)\n        return () => clearTimeout(getData)\n    }, [])\n\n    const allEvents = useSelector(eventActions.getEvents)\n    return (\n        <>\n            <NavBarLoggedIn></NavBarLoggedIn>\n            <br/><br/>\n            <ul className='events-index'>\n            {allEvents.map(event => {\n                return (<>\n                    <Link to={`events/${event.id}`}><b>{event.title}:</b></Link>\n                    <li>Organizer: {event.organizerName}</li>\n                    <li>Location: {event.venueName}</li>\n                    <li>Date/Time: {event.timestampStart} - {event.timestampEnd}</li>\n                    <li>Type: {event.eventType}</li>\n                    <li>Category: {event.eventCategory}</li>\n                    <li>{event.capacity - event.ticketsSold} tickets remaining</li>\n                    <li>Price: {event.price}</li>\n                    <li>Description: {event.description}</li>\n                </>)\n            })}\n            </ul>\n        </>\n    )\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/SplashPage.js",["148"],[],"import NavBarLoggedIn from \"../NavBar/NavBarLoggedIn\";\nimport NavBarLoggedOut from \"../NavBar/NavBarLoggedOut\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport * as sessionActions from '../../store/sessionReducer.js';\nimport * as eventActions from'../../store/eventsReducer';\nimport * as userActions from '../../store/usersReducer';\nimport './SplashPage.css';\n\n\nexport default function SplashPage () {\n    const dispatch = useDispatch();\n    const currentUserId = useSelector(sessionActions.getCurrentUser)?.id\n    const currentUser = useSelector(userActions.getUser(currentUserId))\n    const allEvents = useSelector(eventActions.getEvents)\n\n    useEffect(() =>{\n        let getData = setTimeout(() => {\n            if (currentUserId) dispatch(userActions.fetchUserEvents(currentUserId));\n            dispatch(eventActions.fetchEvents())\n          }, 0)\n        return () => clearTimeout(getData)\n    }, [])\n\n    return(\n        <>\n            <main id='splash-main'>\n            {currentUser ? <NavBarLoggedIn /> : <NavBarLoggedOut />}\n            <br />\n            <br />\n            <div className='splash-banner'>\n                <Link to='/search'>\n                    <button id='event-search-button'>\n                        Find your next event\n                    </button>\n                </Link>\n            </div>\n            <h2>Events:</h2>\n            {allEvents.map(event =>{\n                return(<>\n                    <p>{event.title}<br/>\n                    {event.timestampStart}<br/>\n                    {event.organizerName}<br/>\n                    </p><br/><br/>\n                </>)\n            })}\n            </main>\n        </>\n    )\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/ShowEvent.js",["149","150","151"],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/users/SignInForm.js",["152","153","154"],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/CreateEvent.js",["155","156"],[],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Calendar from 'react-calendar';\nimport moment from 'moment-timezone';\nimport { useHistory, Link } from 'react-router-dom';\nimport * as eventActions from \"../../store/eventsReducer\";\nimport * as sessionActions from '../../store/sessionReducer';\nimport NavBarLoggedIn from \"../NavBar/NavBarLoggedIn\";\nimport './CreateEvent.css';\n\nexport default function CreateEvent () {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const currentUser = useSelector(sessionActions.getCurrentUser)\n\n    const [title, setTitle] = useState('')\n    const [organizerName, setOrganizerName] = useState('')\n    const [eventType, setEventType] = useState('')\n    const [eventCategory, setEventCategory] = useState('')\n    const [venueName, setVenueName] = useState('')\n    const [address, setAddress] = useState('')\n    const [eventStartDate, setEventStartDate] = useState(moment(moment().add(72, 'day').tz(\"America/New_York\")).format('MM/DD/YYYY'))\n    const [eventStartTime, setEventStartTime] = useState('12:00 PM')\n    const [eventEndDate, setEventEndDate] = useState(eventStartDate)\n    const [eventEndTime, setEventEndTime] = useState('3:00 PM')\n    const [capacity, setCapacity] = useState('')\n    const [errors, setErrors] = useState([]);\n    const [price, setPrice] = useState(0);\n    const [description, setDescription] = useState('');\n    const [startCalActive, setStartCalActive] = useState(false);\n    const [endCalActive, setEndCalActive] = useState(false);\n    \n    const eventTypes = [\n        {value: null, display: 'Type'},\n        {value: 'attraction', display: 'Attraction'},\n        {value: 'camp_trip_retreat', display: 'Camp/Trip/Retreat'},\n        {value: 'concert_performance', display: 'Concert/Performance'},\n        {value: 'conference', display: \"Conference\"},\n        {value: 'convention', display: 'Convention'},\n        {value: 'dinner_gala', display: 'Dinner/Gala'},\n        {value: 'festival_fair', display: 'Festival/Fair'},\n        {value: 'party_social_gathering', display: 'Party/Social Gathering'},\n        {value: 'type_other', display: \"Other\"}\n    ]\n\n    const eventCategories = [\n        {value: null, display: 'Category'},\n        {value: 'community_culture', display: 'Community/Culture'},\n        {value: 'fashion_beauty', display: 'Fashion/Beauty'},\n        {value: 'film_media_entertainment', display: 'Film/Media/Entertainment'},\n        {value: 'food_drink', display: 'Food/Drink'},\n        {value: 'music', display: 'Music'},\n        {value: 'category_other', display: 'Other'},\n        {value: 'travel_outdoor', display: 'Travel/Outdoor'}\n    ]\n\n    const focusInput = (e) => {\n        //blur anything that's currently focused\n        Array.from(document.querySelectorAll('.create-event-field-input'))\n            .forEach(el => {\n                el.blur()\n            })\n        \n        //whichever div is clicked, find its input and focus it\n        if (e.target.className === 'create-event-field-box') {\n            let input = e.target.querySelector('.create-event-field-input')\n            input.focus()\n        } else if (e.target.className === 'create-event-field-text') {\n\n            let outerDiv = e.target.parentNode\n            let input = outerDiv.querySelector('.create-event-field-input')\n            input.focus()\n\n        } else if (e.target.className === 'create-event-field-input') {\n            e.target.focus()\n        }\n    }\n\n    function setClosestDivsActive(e){\n        //add 'focus' class to both surrounding divs of the input\n        //that was focused\n        if (Array.from(document.querySelector('.event-start-date-button').querySelectorAll('*')).includes(e.target)\n            || Array.from(document.querySelector('.event-end-date-button').querySelectorAll('*')).includes(e.target)\n            ) {\n            return;\n        }\n\n        if (e.target.closest('div').classList.contains('create-event-field-text')) {\n            let outerDiv = e.target.closest('div').parentNode\n            outerDiv.classList.add('active-div')\n\n            let textFieldTitle = outerDiv.querySelector('.create-event-field-text')\n            textFieldTitle.classList.add('active-field')\n        } else if (e.target.closest('div').classList.contains('create-event-field-box')) {\n            let outerDiv = e.target.closest('div')\n            outerDiv.classList.add('active-div')\n\n            let textFieldTitle = outerDiv.querySelector('.create-event-field-text')\n            textFieldTitle?.classList.add('active-field')\n        }\n\n    }\n\n    function setClosestDivsInactive(e) {\n        //remove 'focus' class from both surrounding divs of the input\n        //that was blurred\n        let outerDiv = e.target.closest('div')\n        outerDiv.classList.remove('active-div')\n        let textFieldTitle = Array.from(outerDiv.childNodes)[0]\n        textFieldTitle.classList.remove('active-field')\n    }\n\n    const toggleCalendar = (e) =>{\n        e.preventDefault();\n        // debugger\n\n        if ((e.target === document.querySelector('.event-start-date-button') || Array.from(document.querySelector('.event-start-date-button').querySelectorAll('*')).includes(e.target))\n            && !(e.target.classList.contains(\"event-date-value\") \n            || e.target.classList.contains('react-calendar__tile')\n            || e.target.parentNode.classList.contains('react-calendar__tile'))) {\n            setStartCalActive(true)\n        } else if ((e.target === document.querySelector('.event-end-date-button') || Array.from(document.querySelector('.event-end-date-button').querySelectorAll('*')).includes(e.target))\n            && !(e.target.classList.contains(\"event-date-value\") \n            || e.target.classList.contains('react-calendar__tile')\n            || e.target.parentNode.classList.contains('react-calendar__tile'))) {\n            setEndCalActive(true)\n        } else {\n            setStartCalActive(false)\n            setEndCalActive(false)\n        }\n    }\n\n    const handleCreate = () => {\n        let event = {\n            title,\n            organizerName,\n            eventType,\n            eventCategory,\n            venueName,\n            address,\n            timestampStart: moment(`${eventStartDate.toString().slice(0,15)} ${eventStartTime}`).tz('America/New_York').format(),\n            timestampEnd: moment(`${eventEndDate.toString().slice(0,15)} ${eventEndTime}`).tz('America/New_York').format(),\n            capacity,\n            price,\n            description,\n            organizerId: currentUser.id\n        }\n\n        debugger\n        setErrors([])\n        return dispatch(eventActions.createEvent(event))\n            // .catch(async (res) => {\n            //     let data;\n            //     try {\n            //         data = await res.clone().json();\n            //     } catch {\n            //         data = await res.text();\n            //     }\n            //     if (data?.errors) setErrors(data.errors);\n            //     else if (data) setErrors([data]);\n            //     else setErrors([res.statusText]);\n            // })\n            .then(() =>{history.push(`/organizer/events`)});\n    };\n\n    return (\n        <>\n            {currentUser ? <NavBarLoggedIn /> : <></>}\n            <br /><br />\n            \n            <br />\n            <div id='back-to-organized-events'>\n                <Link to='/organizer/events'><span><svg id=\"chevron-left-chunky_svg__eds-icon--chevron-left-chunky_svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\" ><path id=\"chevron-left-chunky_svg__eds-icon--chevron-left-chunky_base\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M13.8 7l-5 5 5 5 1.4-1.4-3.6-3.6 3.6-3.6z\"></path></svg>\n                Events</span></Link>\n            </div>\n\n            <br /><br/><br/>\n            <form className='centered-create-event' onClick={(e) =>{toggleCalendar(e); focusInput(e)}}>\n                <section id='basic-info'>\n                    <div id='basic-info-description-box'>\n                        <svg id=\"title-edit-svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"title-edit_svg__eds-icon--title-edit_base\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M2 2v3h1V3h5v10H6v1h5v-1H9V3h5v2h1V2H2z\"></path><g id=\"title-edit_svg__eds-icon--title-edit_lines\" fillRule=\"evenodd\" clip-rule=\"evenodd\"><path d=\"M15 9h7v1h-7zM15 13h7v1h-7zM6 17h16v1H6zM6 21h16v1H6z\"></path></g></svg>\n                        <h2 id='basic-info-h2'>Basic Info</h2>\n                        <div id='basic-info-p-container'>\n                            <p>\n                                Name your event and tell event-goers why they should come. Add details that highlight what makes it unique.\n                            </p>\n                        </div>\n                    </div>\n\n                    <div className='create-event-field-box'>\n                        <div className='create-event-field-text'>\n                            Event Title <b style={{ color: 'red' }}>*</b>\n                        </div>\n\n                        <br />\n\n                        <span className='create-event-field-input-box'>\n                            <label>\n                                <input className='create-event-field-input'\n                                    type='text' \n                                    name='title'\n                                    placeholder=\"Be deceptive and misleading. Don't arouse suspicion.\"\n                                    onChange={e => setTitle(e.target.value)}\n                                    onFocus={e => setClosestDivsActive(e)}\n                                    onBlur={e => setClosestDivsInactive(e)}\n                                />\n                            </label>\n                        </span>\n                    </div>\n                    \n                    <div className='create-event-field-box'>\n                        <div className='create-event-field-text'>\n                            Organizer\n                        </div>\n\n                        <br />\n\n                        <span className='create-event-field-input-box'>\n                            <label>\n                                <input className='create-event-field-input'\n                                    type='text' \n                                    name='title'\n                                    placeholder=\"Fake names are fine. Avoid giving out details that could help slayers track us.\"\n                                    onChange={e => setOrganizerName(e.target.value)}\n                                    onFocus={e => setClosestDivsActive(e)}\n                                    onBlur={e => setClosestDivsInactive(e)}\n                                />\n                            </label>\n                        </span>\n                    </div>\n                    <div className='event-type-container'>\n                        <select name='event-type' id=\"event-type-dropdown\" onChange={(e) =>{setEventType(e.target.value)}} defaultValue={eventTypes[0]}>\n                            {eventTypes.map(type =>{\n                                return (\n                                    <option key={type.value} value={type.value} > \n                                        {type.display}\n                                    </option>\n                                )\n                            })}\n                        </select>\n                    </div>\n                    <br/>\n                    <div className='event-category-container'>\n                        <select name='event-category' id=\"event-category-dropdown\" onChange={(e) =>{setEventCategory(e.target.value)}} defaultValue={eventCategories[0]}>\n                            {eventCategories.map(cat =>{\n                                return (\n                                    <option key={cat.value} value={cat.value} > \n                                        {cat.display}\n                                    </option>\n                                )\n                            })}\n                        </select>\n                    </div>\n                </section>\n\n                <hr className='create-event-section-division-hr' id='basic-info-location-division-hr'/>\n\n                <section id='Location-box'>\n                    <div className='location-description-box'>\n                        <svg id=\"map_svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M20 3c-1.1 0-2 .9-2 2H2v16h17.8c1.1 0 2.1-.9 2.1-2V5c.1-1.1-.8-2-1.9-2zm-.2 17H3V6h15v13h1c0-.6.4-1 1-1 .5 0 .9.4 1 .9-.1.6-.6 1.1-1.2 1.1zm1.2-2.7c-.3-.2-.6-.3-1-.3s-.7.1-1 .3V5c0-.6.4-1 1-1s1 .4 1 1v12.3z\"></path><path id=\"map_svg__eds-icon--map_cross\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8.8 12.7l.7-.7-1.1-1 1.1-1-.7-.7-1.1 1-1-1-.7.7 1 1-1 1 .7.7 1-1z\"></path><path id=\"map_svg__eds-icon--map_dash_3_\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 10h2v1h-2z\"></path><path id=\"map_svg__eds-icon--map_dash_2_\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15 12h1v2h-1z\"></path><path id=\"map_svg__eds-icon--map_dash_1_\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 15h2v1h-2z\"></path><path id=\"map_svg__eds-icon--map_dash\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8 15h2v1H8z\"></path></svg>\n                        <h2 id='location-h2'>Location</h2>\n                        <div id='location-p-container'>\n                            <p>\n                                Pick a prime spot to amass the largest number of fools you can. The more the bloodier!\n                            </p>\n                        </div>\n                    </div>\n                    <div className='create-event-field-box' id='create-event-venue-box'>\n                        <span className='create-event-field-input-box' id='create-event-venue-input-box'>\n                            <label>\n                                <input className='create-event-field-input'\n                                    id='create-event-venue-input'\n                                    type='text' \n                                    name='venue-name'\n                                    placeholder=\"Open air venues are best - no invitation inside needed. Make sure to check the weather forecast.\"\n                                    onChange={e => {setVenueName(e.target.value);setAddress(e.target.value)}}\n                                    onFocus={e => setClosestDivsActive(e)}\n                                    onBlur={e => setClosestDivsInactive(e)}\n                                />\n                                <svg id=\"magnifying-glass-venue\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"magnifying-glass-chunky_svg__eds-icon--magnifying-glass-chunky_base\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M10 14c2.2 0 4-1.8 4-4s-1.8-4-4-4-4 1.8-4 4 1.8 4 4 4zm3.5.9c-1 .7-2.2 1.1-3.5 1.1-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6c0 1.3-.4 2.5-1.1 3.4l5.1 5.1-1.5 1.5-5-5.1z\"></path></svg>\n                            </label>\n                        </span>\n                    </div>\n                </section>\n\n                <hr className='create-event-section-division-hr' id='location-date-division-hr'/>\n                \n                <section id='date-and-time'>\n                    <div className='datetime-description-box'>\n                        <svg id=\"calendar_svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"calendar_svg__eds-icon--calendar_base\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M17 4V2h-1v2H8V2H7v2H2v18h20V4h-5zm4 17H3V9h18v12zM3 8V5h4v1h1V5h8v1h1V5h4v3H3z\"></path><g id=\"calendar_svg__eds-icon--calendar_squares\" fillRule=\"evenodd\" clip-rule=\"evenodd\"><path d=\"M15 16h2v2h-2zM11 16h2v2h-2zM7 16h2v2H7zM15 12h2v2h-2zM11 12h2v2h-2zM7 12h2v2H7z\"></path></g></svg>\n                        <h2 id='location-h2'>Date and time</h2>\n                        <div id='location-p-container'>\n                            <p>\n                                Choose a day and time to gather your unsuspecting victims together. Nighttime is usually best, unless you're indoors of course.\n                            </p>\n                        </div>\n                    </div>\n                    \n                    <div className='event-start-box'>\n                        <div className='event-start-date-button timestamp-button'>\n                            <svg id=\"small_calendar_svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"calendar-chunky_svg__eds-icon--calendar-chunky_base\" d=\"M16.9 6.5v-2h-2v2h-6v-2h-2v2h-2v13h14v-13h-2zm0 11h-10v-7h10v7z\"></path></svg>\n                            <div className='event-date-text event-date-text' id='event-start-date-text'>Event Starts</div>\n                            <div className='event-date-value event-date-value' id='event-start-date-value'>{`${moment(eventStartDate).format('MM/DD/YYYY')}`}</div>\n                            <div className='calendar-box' id='event-start-date-box'>\n                                <Calendar className={`calendar-timestamp-start calendar ${startCalActive ? '' : 'hidden'}`} onChange={setEventStartDate} defaultValue={eventStartDate} />\n                            </div>\n                            <br/>\n                        </div>\n\n                        <div className='event-start-time-button timestamp-button' onClick={(e) =>{\n                                    document.querySelector('.event-start-times-dropdown').classList.toggle('hidden');\n                                    document.querySelector('.event-start-times-dropdown').setAttribute('size', 12)}}>\n                            <div className='event-time-text' id='event-start-time-text'>Start Time</div>\n                            <div className='event-time-value' id='event-start-time-value'>{eventStartTime}</div>\n                            <label>\n                                    <select className='event-start-times-dropdown hidden' name='event-start-times' id=\"event-start-times\" onChange={(e) =>{setEventStartTime(e.target.value)}} defaultValue={eventStartTime}>\n                                        {[...Array(48).keys()].map(i =>{\n                                            let time = moment(eventStartDate).startOf('day').add(30*i,'minutes').format('hh:mm A')\n                                            return (\n                                                <option key={i} value={time} > \n                                                    {`${moment(eventStartDate).startOf('day').add(30*i,'minutes').format('hh:mm A')}`}\n                                                </option>\n                                            )\n                                        })}\n                                    </select>\n                            </label>\n                        </div>        \n                    </div>\n\n                    <div className='event-end-container'>\n                        <div className='event-end-date-button timestamp-button'\n                            >\n                            <svg id=\"small_calendar_svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"calendar-chunky_svg__eds-icon--calendar-chunky_base\" d=\"M16.9 6.5v-2h-2v2h-6v-2h-2v2h-2v13h14v-13h-2zm0 11h-10v-7h10v7z\"></path></svg>\n                            <div className='event-date-text' id='event-end-date-text'>Event Ends</div>\n                            <div className='event-date-value' id='event-end-date-value'>{`${moment(eventEndDate).format('MM/DD/YYYY')}`}</div>\n                            <div className='calendar-box' id='event-end-date-box'>\n                                <Calendar className={`calendar-timestamp-end calendar ${endCalActive ? '' : 'hidden'}`} onChange={setEventEndDate} defaultValue={eventEndDate} />\n                            </div>\n                            <br/>\n                        </div>\n                        \n                        <div className='event-end-time-button timestamp-button' onClick={(e) =>{\n                                    document.querySelector('.event-end-times-dropdown').classList.toggle('hidden');\n                                    document.querySelector('.event-end-times-dropdown').setAttribute('size', 12)}}>\n                            <div className='event-time-text' id='event-end-time-text'>Start Time</div>\n                            <div className='event-time-value' id='event-end-time-value'>{eventEndTime}</div>\n                            <label>\n                                    <select className='event-end-times-dropdown hidden' name='event-end-times' id=\"event-end-times\" onChange={(e) =>{setEventEndTime(e.target.value)}} defaultValue={eventEndTime}>\n                                        {[...Array(48).keys()].map(i =>{\n                                            let time = moment(eventEndDate).startOf('day').add(30*i,'minutes').format('hh:mm A')\n                                            return (\n                                                <option key={i} value={time} > \n                                                    {`${moment(eventEndDate).startOf('day').add(30*i,'minutes').format('hh:mm A')}`}\n                                                </option>\n                                            )\n                                        })}\n                                    </select>\n                            </label>\n                            <br/>\n                        </div>\n                    </div>\n                </section>\n                <br/><br/><br/>\n                <hr className='create-event-section-division-hr' id='date-misc-division-hr'/>\n\n                <section id='misc-description'>\n                    <div className='misc-description-box'>\n                        <svg id=\"map_svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M20 3c-1.1 0-2 .9-2 2H2v16h17.8c1.1 0 2.1-.9 2.1-2V5c.1-1.1-.8-2-1.9-2zm-.2 17H3V6h15v13h1c0-.6.4-1 1-1 .5 0 .9.4 1 .9-.1.6-.6 1.1-1.2 1.1zm1.2-2.7c-.3-.2-.6-.3-1-.3s-.7.1-1 .3V5c0-.6.4-1 1-1s1 .4 1 1v12.3z\"></path><path id=\"map_svg__eds-icon--map_cross\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8.8 12.7l.7-.7-1.1-1 1.1-1-.7-.7-1.1 1-1-1-.7.7 1 1-1 1 .7.7 1-1z\"></path><path id=\"map_svg__eds-icon--map_dash_3_\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 10h2v1h-2z\"></path><path id=\"map_svg__eds-icon--map_dash_2_\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15 12h1v2h-1z\"></path><path id=\"map_svg__eds-icon--map_dash_1_\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 15h2v1h-2z\"></path><path id=\"map_svg__eds-icon--map_dash\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8 15h2v1H8z\"></path></svg>\n                        <h2 id='location-h2'>Miscellaneous details</h2>\n                        <div id='location-p-container'>\n                            <p>\n                            Fill in your event with even more misleading details!\n                            </p>\n                        </div>\n                    </div>\n                    <br/><br/>\n                    <div className='create-event-field-box' id='create-event-capacity-box' onClick={(e) =>{focusInput(e)}}>\n                        <div className='create-event-field-text' id='event-capacity-text'>Capacity</div>\n                        <span className='create-event-field-input-box' id='create-event-capacity-input-box'>\n                            <label>\n                                <input className='create-event-field-input'\n                                    id='create-event-capacity-input'\n                                    type='text' \n                                    placeholder=\"How many victims do you plan to invite? Be ambitious!\"\n                                    onChange={e => {setCapacity(e.target.value)}}\n                                    onFocus={e => setClosestDivsActive(e)}\n                                    onBlur={e => setClosestDivsInactive(e)}\n                                />\n                            </label>\n                        </span>\n                    </div>\n                    <div className='create-event-field-box' id='create-event-price-box' onClick={(e) =>{focusInput(e)}}>\n                        <div className='create-event-field-text' id='event-price-text'><p>Price<br/>$</p></div>\n                        <span className='create-event-field-input-box' id='create-event-price-input-box'>\n                            <label>\n                                <input className='create-event-field-input'\n                                    id='create-event-price-input'\n                                    type='text' \n                                    placeholder=\"Why not charge people while you feast on them? Kill two bats with one stone.\"\n                                    onChange={e => {setPrice(e.target.value)}}\n                                    onFocus={e => setClosestDivsActive(e)}\n                                    onBlur={e => setClosestDivsInactive(e)}\n                                />\n                            </label>\n                        </span>\n                    </div>\n                    <div className='create-event-field-box' id='create-event-description-box' onClick={(e) =>{focusInput(e)}}>\n                        <div className='create-event-field-text' id='event-description-text'>Description</div>\n                        <span className='create-event-field-input-box' id='create-event-description-input-box'>\n                            <textarea className='create-event-field-input'\n                                id='create-event-description-input'\n                                placeholder=\"Give a fake event description to entice the humans to attend. Be descriptive. Be misleading. Humans are gullible.\"\n                                onChange={e => {setDescription(e.target.value)}}\n                                onFocus={e => setClosestDivsActive(e)}\n                                onBlur={e => setClosestDivsInactive(e)}\n                            />\n                        </span>\n                    </div>\n                </section>\n\n                <div className='whitespace' />\n            </form>\n        <div className='create-event-button-box'>\n            <hr id='create-event-bottom-fullscreen-hr' />\n            <button className='create-event-discard-button' onClick={()=>history.goBack()}>Discard</button>\n            <button className='create-event-button' onClick={handleCreate}>Create Event</button>\n        </div>\n        </>\n    )\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/events/SearchEvents.js",["157","158","159","160"],[],"import { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport * as sessionActions from '../../store/sessionReducer.js';\nimport * as eventActions from'../../store/eventsReducer';\nimport * as userActions from '../../store/usersReducer';\n\nimport './SearchEvents.css'\n\nexport default function EventsSearch () {\n\n    const dispatch = useDispatch();\n    const currentUserId = useSelector(sessionActions.getCurrentUser)?.id\n    const currentUser = useSelector(userActions.getUser(currentUserId))\n    const allEvents = useSelector(eventActions.getEvents)\n\n    useEffect(() =>{\n        let getData = setTimeout(() => {\n            if (currentUserId) dispatch(userActions.fetchUserEvents(currentUserId));\n            dispatch(eventActions.fetchEvents)\n          }, 0)\n        return () => clearTimeout(getData)\n    }, [])\n\n    return (\n        <>\n        <div className='search-page-input'>Search for Anything</div>\n        <div className='search-page-location-selector'>New York</div>\n        <div className='search-page-buttons'>\n            <button>Today</button>\n            <button>This Weekend</button>\n            <button>Free</button>\n            <button>Music</button>\n            <button>Food & Drink</button>\n        </div>\n        </>\n    )\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/errorPages/NotFoundErrorPage.js",[],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/NavBar/NavBarLoggedIn.js",["161","162"],[],"import { useDispatch, useSelector } from 'react-redux';\nimport {useHistory, Link} from 'react-router-dom';\nimport { useEffect } from 'react';\nimport * as sessionActions from '../../store/sessionReducer.js';\nimport * as eventActions from'../../store/eventsReducer';\nimport * as userActions from '../../store/usersReducer';\nimport './NavBarLoggedIn.css';\n\nexport default function NavBarLoggedIn () {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const currentUserId = useSelector(sessionActions.getCurrentUser)?.id\n    const currentUser = useSelector(userActions.getUser(currentUserId))\n    // **LOOK AT HISTORY.LOCATION**\n\n    useEffect(() =>{\n        let getData = setTimeout(() => {\n            if (currentUserId) dispatch(userActions.fetchUserEvents(currentUserId));\n          }, 0)\n        return () => clearTimeout(getData)\n    }, [])\n\n    // const toggleDropdown = (e) => {\n    //     let el = e.target.closest('span')\n    //     let dropdown = el.childNodes[2]\n    //     dropdown.classList.toggle('hidden')\n    // }\n\n    // const showDropdown = (e) => {\n    //     let el = e.target.closest('span')\n    //     let dropdown = el.childNodes[2]\n\n    //     dropdown.classList.remove('hidden')\n    // }    \n\n    // const hideDropdown = (e) => {\n    //     let el = e.target.closest('span')\n    //     let dropdown = el.childNodes[2]\n\n    //     dropdown.classList.add('hidden')\n    // }\n\n    const logout = (e) => {\n        e.preventDefault();\n\n        return (dispatch(sessionActions.logout()))\n            // .catch(async (res) => {\n            //     let data;\n            //     try {\n            //         data = await res.clone().json();\n            //     } catch {\n            //         data = await res.text();\n            //     }\n            //     if (data?.errors) setErrors(data.errors);\n            //     else if (data) setErrors([data]);\n            //     else setErrors([res.statusText]);\n            // });\n            .then(history.push('/signin'))\n        \n    }\n\n    return (\n        <>\n        <nav id='main-navigation-in'>\n            <div className='navbar-in-container'>\n                <ul className='navbar-ul'>\n                    <li className='nav-left'> \n                        <Link to='/'>\n                            <div id='eblogo-nav' />\n                        </Link>\n                    </li>\n\n                    <li className='nav-left'> \n                        <Link to='/search'>\n                            <div id='search-events'>\n                                <svg id=\"magnifying-glass\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"magnifying-glass-chunky_svg__eds-icon--magnifying-glass-chunky_base\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M10 14c2.2 0 4-1.8 4-4s-1.8-4-4-4-4 1.8-4 4 1.8 4 4 4zm3.5.9c-1 .7-2.2 1.1-3.5 1.1-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6c0 1.3-.4 2.5-1.1 3.4l5.1 5.1-1.5 1.5-5-5.1z\"></path></svg>\n                                <div id='search-text'>Search events</div>\n                            </div>\n                        </Link> \n                    </li>\n\n                    <li className='nav-right user-dropdown'>\n                        <div className='dropdown' id='user-in-dropdown' /*onClick={e =>toggleDropdown(e)} onMouseOver={e => showDropdown(e)} onBlur={e =>hideDropdown(e)} */ >\n                            <div id='user-in-dropdown-email'>{currentUser?.email}</div>\n                            <svg id=\"user-in-chevron-down\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"chevron-down-chunky_svg__eds-icon--chevron-down-chunky_base\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M7 10.2l5 5 5-5-1.4-1.4-3.6 3.6-3.6-3.6z\"></path></svg>\n                            <div className='dropdown-content hidden' id='user-in-dropdown-content'>\n                                <ul>\n                                    <li onClick={()=>history.push('/all-events')}><div className='dropdown-content-text-box'>Browse Events</div></li>\n                                    <li onClick={()=>history.push('/organizer/events')}><div className='dropdown-content-text-box'>Manage my Events</div></li>\n                                    <li onClick={()=>history.push(`/user/${currentUser?.id}`)}><div className='dropdown-content-text-box'>Tickets ({currentUser?.attendingEvents?.length})</div></li>\n                                    {/* <li><div className='dropdown-content-text-box'>Liked</div></li>\n                                    <li><div className='dropdown-content-text-box'>Following</div></li> */}\n                                    <li onClick={logout}><div className='dropdown-content-text-box'>Logout</div></li>\n                                </ul>\n                            </div>\n                            <div id='user-icon-svg-circle-container'>\n                                <svg id=\"user-icon-svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"user-chunky_svg__eds-icon--user-chunky_base\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 18c-1.2 0-2.4-.3-3.5-.7.6-1.3 2-2.2 3.5-2.2s2.9.9 3.5 2.2c-1.1.4-2.3.7-3.5.7zm6.5-2.9c-.4.4-.8.8-1.3 1.1a5.989 5.989 0 00-10.6 0c-.5-.3-.9-.7-1.3-1.1L4 16.5c2.1 2.3 5 3.5 8 3.5s5.9-1.3 8-3.5l-1.5-1.4z\"></path><path id=\"user-chunky_svg__eds-icon--user-chunky_circle\" fillRule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 4C9.7 4 7.8 5.9 7.8 8.2s1.9 4.2 4.2 4.2 4.2-1.9 4.2-4.2S14.3 4 12 4zm0 6.4c-1.2 0-2.2-1-2.2-2.2C9.8 7 10.8 6 12 6s2.2 1 2.2 2.2c0 1.2-1 2.2-2.2 2.2z\"></path></svg>\n                            </div>\n                        </div>\n                    </li>\n\n                    <li className='nav-right'> \n                        <Link to={`/user/${currentUser?.id}`}>\n                            <div id='nav-in-tickets'>    \n                                <svg id='ticket-svg' viewBox=\"0 0 24 24\"><path d=\"M10 13v-2h4v2zm6 5V6h-.4C15 7.4 13.8 8.4 12 8.4S9 7.4 8.4 6H8v12h.4c.6-1.4 1.8-2.4 3.6-2.4s3 1 3.6 2.4zM14 4h4v16h-4s0-2.4-2-2.4-2 2.4-2 2.4H6V4h4s0 2.4 2 2.4S14 4 14 4z\"></path></svg>\n                                <div id='nav-in-tickets-text'>Tickets</div>\n                            </div>\n                        </Link>\n                    </li>\n\n                    <li className='nav-right'> \n                        <Link to={`users/${currentUser?.id}/favorites`}>\n                            <div id='nav-in-favorites'>\n                                <div id='nav-in-favorites-text'>Likes</div>\n                                <svg id=\"heart-svg\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"heart-chunky_svg__eds-icon--heart-chunky_base\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M18.8 6.2C18.1 5.4 17 5 16 5c-1 0-2 .4-2.8 1.2L12 7.4l-1.2-1.2C10 5.4 9 5 8 5c-1 0-2 .4-2.8 1.2-1.5 1.6-1.5 4.2 0 5.8l6.8 7 6.8-7c1.6-1.6 1.6-4.2 0-5.8zm-1.4 4.4L12 16.1l-5.4-5.5c-.8-.8-.8-2.2 0-3C7 7.2 7.5 7 8 7c.5 0 1 .2 1.4.6l2.6 2.7 2.7-2.7c.3-.4.8-.6 1.3-.6s1 .2 1.4.6c.8.8.8 2.2 0 3z\"></path></svg>\n                            </div>\n                        </Link>\n                    </li>\n\n                    <li className='nav-right'> \n                        <Link to='/events/create/'>\n                            <div id='create-event-in'>\n                                <svg id=\"plus-sign\" x=\"0\" y=\"0\" viewBox=\"0 0 24 24\"><path id=\"plus-chunky_svg__eds-icon--plus-chunky_base\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M13 11V4h-2v7H4v2h7v7h2v-7h7v-2z\"></path></svg>\n                                <div id='create-event-in-text'>Create an event</div>\n                            </div>\n                        </Link>\n                    </li>\n                </ul>\n            <hr className='navbar-in-fullscreen-hr'/>\n            </div>\n        </nav>        \n        </>\n    )\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/NavBar/NavBarLoggedOut.js",[],[],"/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/store/ordersReducer.js",["163","164"],[],"import csrfFetch from \"./csrf\";\n\nconst RECEIVE_ORDER = 'receiveOrders';\nconst RECEIVE_USER_ORDERS = 'receiveUserOrders';\nconst RECEIVE_USER_EVENTS = 'receiveUserEvents'\nconst REMOVE_ORDER = 'removeOrders';\n\nexport const getOrder = (orderId) => state => {\n    return state.orders ? state.orders[orderId] : null\n}\n\nexport const getOrders = state => {\n    return state && state.orders ? Object.values(state.orders) : []\n}\n\nexport const fetchOrder = orderId => async dispatch =>{\n    const response = await fetch(`/api/orders/${orderId}`)\n    const data = await response.json();\n\n    if (response.ok) {\n        dispatch({\n            type: RECEIVE_ORDER,\n            order: data.order\n        })\n    }\n    return [data.order, true]\n}\n\nexport const createOrder = (order) => async dispatch => {\n    const response = await csrfFetch(`/api/orders`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(order)\n    })\n    const data = response.json()\n\n    dispatch({\n        type: REMOVE_ORDER,\n        order: data.order\n    })\n}\n\nexport const deleteOrder = (orderId) => async dispatch => {\n    const response = await csrfFetch(`/api/orders/${orderId}`, {\n        method: 'DELETE',\n        headers: {'Content-Type': 'application/json'},\n    })\n\n    dispatch({\n        type: REMOVE_ORDER,\n        orderId: orderId\n    })\n}\n\nconst ordersReducer = (oldState = {}, action) => {\n    let newState = {...oldState}\n    switch (action.type) {\n        // case RECEIVE_ORDERS:    \n        //     newState = {...oldState,...action.orders}\n        //     return newState\n        case RECEIVE_ORDER:\n            newState[action.order.id] = action.order\n            return newState\n        case RECEIVE_USER_EVENTS:\n            newState = {...oldState,...action.orders}\n            return newState\n        case REMOVE_ORDER:\n            delete newState[action.orderId]\n            return newState\n        default:\n            return oldState\n    }\n}\n\nexport default ordersReducer","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/orders/OrderIndex.js",["165"],[],"import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from \"react\";\nimport NavBarLoggedIn from '../NavBar/NavBarLoggedIn';\nimport * as sessionActions from '../../store/sessionReducer';\nimport * as userActions from '../../store/usersReducer';\nimport * as eventActions from '../../store/eventsReducer';\nimport * as orderActions from '../../store/ordersReducer';\nimport './OrderIndex.css'\n\nexport default function OrderIndex () {\n    const dispatch = useDispatch();\n    const currentUserId = useSelector(sessionActions.getCurrentUser).id\n    const currentUser = useSelector(userActions.getUser(currentUserId))\n    const orders = useSelector(orderActions.getOrders).sort((a,b) => b.id - a.id)\n    const events = useSelector(eventActions.getEvents)\n\n    useEffect(() =>{\n        let getData = setTimeout(() => {\n            dispatch(userActions.fetchUserEvents(currentUserId));\n          }, 0)\n        return () => clearTimeout(getData)\n    }, [])\n\n    const pluralizeOrders = () =>{\n        if (currentUser && currentUser.orders.length === 1) {\n            return 'order'\n        } else return 'orders'\n    }\n\n    if (currentUser) {return (\n        <>\n            <NavBarLoggedIn />\n            <main className='order-index-main'>\n                <div className='show-user-name-tile'>\n                    <p>Pic placeholder</p>\n                    <h1 className='show-user-name-tile-name'>{`${currentUser?.firstName} ${currentUser.lastName}`}</h1>\n                    <p>{currentUser?.orders.length} {pluralizeOrders()}</p>\n                </div>\n                <div className='order-index-orders'>\n                    <h2>Orders</h2>\n                    {orders.map(order =>{\n                        const event = events.filter(event => event.id === order.eventId)[0]\n                        return(\n                            <>\n                                <p>order #{order.id}</p>\n                                <p>ordered on {order.createdAt}</p>\n                                <p>{event.title}</p>\n                                <p>{event.date}</p>\n                                <p>{`$${event.price * order.numTickets}` || 'Free order'}</p>\n                            </>\n                        )\n                    })}\n                </div>\n            </main>\n        </>\n    )}\n}","/Users/joerandazzo/Documents/App Academy/aA Projects/eventbite/frontend/src/components/orders/OrderShow.js",["166","167"],[],"import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from \"react\";\nimport { useHistory, useParams, Link } from 'react-router-dom';\nimport NavBarLoggedIn from '../NavBar/NavBarLoggedIn';\nimport * as sessionActions from '../../store/sessionReducer';\nimport * as userActions from '../../store/usersReducer';\nimport * as eventActions from '../../store/eventsReducer';\nimport * as orderActions from '../../store/ordersReducer';\nimport './OrderShow.css'\n\nexport default function OrderShow () {\n    const dispatch = useDispatch();\n    const {orderId} = useParams();\n    const currentUserId = useSelector(sessionActions.getCurrentUser).id\n    const currentUser = useSelector(userActions.getUser(currentUserId))\n    const order = useSelector(orderActions.getOrder(orderId))\n    const event = useSelector(eventActions.getEvent(order?.eventId))\n    useEffect(() =>{\n        let getData = setTimeout(() => {\n            dispatch(userActions.fetchUserEvents(currentUserId));\n          }, 0)\n        return () => clearTimeout(getData)\n    }, [])\n\n    return(\n    <>\n        <NavBarLoggedIn /><br/><br/>\n        <div className='order-show-go-back'>\n            <Link to={`/users/${currentUserId}`}>Back to Current Orders</Link>\n        </div>\n        <div className='order-show-title-box'>\n            <h1 className='order-show-title'>Order for <Link to={`/events/${event?.id}`}>{event?.title}</Link></h1>\n            <p className='order-show-info'>\n                {event?.price ? `$${order.numTickets * event.price}` : `Free`} order #{order?.id} on {order?.createdAt}<br/>\n                <b>Event Information:</b>: from {event?.timestampStart} to {event?.timestampEnd}<br/>\n                {event?.address}\n            </p>\n        </div>\n        <div className='order-show-lower-box'>\n            <button>Cancel Order</button>\n            <div className='order-show-ticket-info'>\n                <h2 className='order-show-ticket-count'>({order?.numTickets}x) General Admission</h2><br/>\n                <h3>Contact Information</h3><br/>\n                <h4>First Name</h4><br/>\n                {currentUser?.firstName}<br/>\n                <h4>Last Name</h4><br/>\n                {currentUser?.lastName}<br/>\n                <h4>Email</h4><br/>\n                {currentUser?.email}\n            </div>\n        </div>\n        <div className='order-show-go-back'>\n            <Link to={`/users/${currentUserId}`}>Back to Current Orders</Link>\n        </div>\n    </>\n    )\n}",{"ruleId":"168","severity":1,"message":"169","line":6,"column":10,"nodeType":"170","messageId":"171","endLine":6,"endColumn":24},{"ruleId":"168","severity":1,"message":"172","line":7,"column":25,"nodeType":"170","messageId":"171","endLine":7,"endColumn":36},{"ruleId":"168","severity":1,"message":"173","line":14,"column":10,"nodeType":"170","messageId":"171","endLine":14,"endColumn":20},{"ruleId":"168","severity":1,"message":"174","line":14,"column":22,"nodeType":"170","messageId":"171","endLine":14,"endColumn":31},{"ruleId":"168","severity":1,"message":"175","line":14,"column":33,"nodeType":"170","messageId":"171","endLine":14,"endColumn":43},{"ruleId":"168","severity":1,"message":"176","line":15,"column":13,"nodeType":"170","messageId":"171","endLine":15,"endColumn":27},{"ruleId":"168","severity":1,"message":"177","line":25,"column":16,"nodeType":"170","messageId":"171","endLine":25,"endColumn":27},{"ruleId":"168","severity":1,"message":"178","line":72,"column":11,"nodeType":"170","messageId":"171","endLine":72,"endColumn":19},{"ruleId":"168","severity":1,"message":"179","line":6,"column":7,"nodeType":"170","messageId":"171","endLine":6,"endColumn":26},{"ruleId":"168","severity":1,"message":"180","line":28,"column":17,"nodeType":"170","messageId":"171","endLine":28,"endColumn":31},{"ruleId":"181","severity":1,"message":"182","line":90,"column":33,"nodeType":"183","endLine":90,"endColumn":173},{"ruleId":"168","severity":1,"message":"184","line":6,"column":8,"nodeType":"170","messageId":"171","endLine":6,"endColumn":12},{"ruleId":"185","severity":1,"message":"186","line":17,"column":31,"nodeType":"187","messageId":"188","endLine":17,"endColumn":60,"fix":"189"},{"ruleId":"190","severity":1,"message":"191","line":29,"column":8,"nodeType":"192","endLine":29,"endColumn":10,"suggestions":"193"},{"ruleId":"190","severity":1,"message":"194","line":25,"column":8,"nodeType":"192","endLine":25,"endColumn":10,"suggestions":"195"},{"ruleId":"168","severity":1,"message":"196","line":54,"column":12,"nodeType":"170","messageId":"171","endLine":54,"endColumn":18},{"ruleId":"190","severity":1,"message":"197","line":17,"column":8,"nodeType":"192","endLine":17,"endColumn":10,"suggestions":"198"},{"ruleId":"190","severity":1,"message":"191","line":24,"column":8,"nodeType":"192","endLine":24,"endColumn":10,"suggestions":"199"},{"ruleId":"168","severity":1,"message":"200","line":3,"column":10,"nodeType":"170","messageId":"171","endLine":3,"endColumn":14},{"ruleId":"190","severity":1,"message":"201","line":34,"column":8,"nodeType":"192","endLine":34,"endColumn":10,"suggestions":"202"},{"ruleId":"190","severity":1,"message":"203","line":38,"column":8,"nodeType":"192","endLine":38,"endColumn":21,"suggestions":"204"},{"ruleId":"168","severity":1,"message":"205","line":1,"column":20,"nodeType":"170","messageId":"171","endLine":1,"endColumn":29},{"ruleId":"168","severity":1,"message":"180","line":28,"column":17,"nodeType":"170","messageId":"171","endLine":28,"endColumn":31},{"ruleId":"181","severity":1,"message":"182","line":87,"column":33,"nodeType":"183","endLine":87,"endColumn":173},{"ruleId":"168","severity":1,"message":"205","line":1,"column":27,"nodeType":"170","messageId":"171","endLine":1,"endColumn":36},{"ruleId":"168","severity":1,"message":"196","line":27,"column":12,"nodeType":"170","messageId":"171","endLine":27,"endColumn":18},{"ruleId":"168","severity":1,"message":"200","line":2,"column":10,"nodeType":"170","messageId":"171","endLine":2,"endColumn":14},{"ruleId":"168","severity":1,"message":"206","line":14,"column":11,"nodeType":"170","messageId":"171","endLine":14,"endColumn":22},{"ruleId":"168","severity":1,"message":"207","line":15,"column":11,"nodeType":"170","messageId":"171","endLine":15,"endColumn":20},{"ruleId":"190","severity":1,"message":"191","line":23,"column":8,"nodeType":"192","endLine":23,"endColumn":10,"suggestions":"208"},{"ruleId":"168","severity":1,"message":"209","line":5,"column":13,"nodeType":"170","messageId":"171","endLine":5,"endColumn":25},{"ruleId":"190","severity":1,"message":"191","line":21,"column":8,"nodeType":"192","endLine":21,"endColumn":10,"suggestions":"210"},{"ruleId":"168","severity":1,"message":"179","line":4,"column":7,"nodeType":"170","messageId":"171","endLine":4,"endColumn":26},{"ruleId":"168","severity":1,"message":"178","line":44,"column":11,"nodeType":"170","messageId":"171","endLine":44,"endColumn":19},{"ruleId":"190","severity":1,"message":"191","line":22,"column":8,"nodeType":"192","endLine":22,"endColumn":10,"suggestions":"211"},{"ruleId":"168","severity":1,"message":"212","line":3,"column":10,"nodeType":"170","messageId":"171","endLine":3,"endColumn":20},{"ruleId":"190","severity":1,"message":"191","line":23,"column":8,"nodeType":"192","endLine":23,"endColumn":10,"suggestions":"213"},"no-unused-vars","'restoreSession' is defined but never used.","Identifier","unusedVar","'useLocation' is defined but never used.","'createUser' is defined but never used.","'loginUser' is defined but never used.","'logoutUser' is defined but never used.","'sessionActions' is defined but never used.","'restoreCSRF' is defined but never used.","'response' is assigned a value but never used.","'RECEIVE_USER_ORDERS' is assigned a value but never used.","'textFieldTitle' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Grid' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property organizedEvents.","MemberExpression","unexpectedWhitespace",{"range":"214","text":"215"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentUserId' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["216"],"React Hook useEffect has missing dependencies: 'currentUser.id', 'dispatch', and 'eventId'. Either include them or remove the dependency array.",["217"],"'errors' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["218"],["219"],"'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'currentUserId', 'dispatch', and 'eventId'. Either include them or remove the dependency array.",["220"],"React Hook useEffect has a missing dependency: 'eventId'. Either include it or remove the dependency array.",["221"],"'useEffect' is defined but never used.","'currentUser' is assigned a value but never used.","'allEvents' is assigned a value but never used.",["222"],"'eventActions' is defined but never used.",["223"],["224"],"'useHistory' is defined but never used.",["225"],[788,791],"?.",{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"226","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"226","fix":"237"},{"desc":"226","fix":"238"},{"desc":"226","fix":"239"},{"desc":"226","fix":"240"},"Update the dependencies array to be: [currentUserId, dispatch]",{"range":"241","text":"242"},"Update the dependencies array to be: [currentUser.id, dispatch, eventId]",{"range":"243","text":"244"},"Update the dependencies array to be: [dispatch]",{"range":"245","text":"246"},{"range":"247","text":"242"},"Update the dependencies array to be: [currentUserId, dispatch, eventId]",{"range":"248","text":"249"},"Update the dependencies array to be: [currentUser, eventId]",{"range":"250","text":"251"},{"range":"252","text":"242"},{"range":"253","text":"242"},{"range":"254","text":"242"},{"range":"255","text":"242"},[1354,1356],"[currentUserId, dispatch]",[1035,1037],"[currentUser.id, dispatch, eventId]",[535,537],"[dispatch]",[995,997],[1501,1503],"[currentUserId, dispatch, eventId]",[1632,1645],"[currentUser, eventId]",[885,887],[863,865],[962,964],[1052,1054]]