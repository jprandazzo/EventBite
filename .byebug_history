c
heart_react_item
exit
browser_like
heart_react_item
c
browser_like.valid?
heart_react_item
browser_like
exit
user_likes_in_db_only
user_likes_in_browser_only
c
@user.likes
user_likes_in_browser
user_likes_in_browser_only
user_likes_in_db_only
user_lines_in_db_only
c
user_likes_in_browser_only
@user.likes.count
@user.likes
Like.create!(event_id: 14, liker_id: 2)
Like.create!(event_id: 2, liker_id: 2)
like.create
like.valid?
like = user_likes_in_browser_only[0]
user_likes_in_browser_only
like
like1
lik1
@user.likes
@user
n
like.valid?
like = user_likes_in_browser_only[0]
s
n
user_likes_in_browser_only
n
cn
c
n
c
user_likes_in_db_only
exit
user_likes_in_db_only
user_likes_in_browser_only
c
n
c
n
nn
n
db_like.event_id == browser_like.event_id && db_like.liker_id == browser_like.liker_id
browser_like
db_like
n
s
c
exit
@user.likes.reject{|like| like.event_id == 14}
@user.likes.reject{|like| like.event_id: 14}
@user.likes.reject{|event| event_id: 14}
@user.likes.reject(|event| event_id: 14)
@user.likes
n
c
n
c
exit
user_likes_in_db_only
n
(db_like.event_id == browser_like.event_id && db_like.liker_id == browser_like.liker_id)
n
user_likes_in_db_only
db_like
n
db_like.event_id == browser_like.event_id && db_like.liker_id == browser_like.liker_id
db_like.event_id == browser_like.event_id && db_like.liker_id == browser_like.liker_id)
db_like.liker_id == browser_like.liker_id
(db_like.event_id == browser_like.event_id)
db_like
browser_like
c
exit
@user.likes
user_likes_in_browser
user_likes_in_browser_only
user_likes_in_db_only
c
user_likes_in_browser_only
user_likes_in_db_only
c
exit
@user.likes
user_likes_in_browser.reject{|like| !!Like.where(liker_id: like.liker_id, event_id: like.event_id)}
user_likes_in_browser.reject{|like| Like.exists?(liker_id: like.liker_id, event_id: like.event_id)}
Like.exists?(liker_id: like1.liker_id, event_id: like1.event_id)
like1.event_id
like1.liker_id
like2 = user_likes_in_browser[1]
like1 = user_likes_in_browser[0]
user_likes_in_browser
user_likes_in_browser.reject{|like| !!Like.where(liker_id: like.liker_id, event_id: like.event_id)}
Like.where(liker_id: 1, event_id: 14)
Like.all
user_likes_in_browser
user_likes_in_browser.reject{|like| Like.where(liker_id: like.liker_id, event_id: like.event_id)}
@user.likes
@user.likes.reject{|db_like| user_likes_in_browser.each {|browser_like| (db_like.event_id == browser_like.event_id && db_like.liker_id == browser_like.liker_id)}}
user_likes_in_browser.include?({event_id: 14})
user_likes_in_browser.include?(event_id: 14)
user_likes_in_browser
user_likes_in_browser.find_by(liker_id: 1)
user_likes_in_browser.find(1)
user_likes_in_browser.find_by(1)
user_likes_in_browser.exists?(event_id: 14)
user_likes_in_browser
user_likes_in_browser.include?({liker_id: @user.likes[0].liker_id, event_id: @user.likes[0].event_id})
user_likes_in_browser.exists?({liker_id: @user.likes[0].liker_id, event_id: @user.likes[0].event_id})
@user.likes[0]
@user.likes
c
exit
n
user_likes_in_browser
c
exit
liked_events_in_browser
c
exit
liked_events_in_browser
Like.new(liker_id: @user.id, event_id: 14)
params[:liked_events]
params
liked_events_in_browser
c
exit
params[:liked_events]
liked_events_in_browser
c
exit
Like.exists?(liker_id:1, event_id: 13)
Like.exists?(liker_id:1, event_id: 14)
Like.exists?(liker_id: 1)
Like.all
Likes.all
Event.exists?(liker_id: 1)
@liked_events_in_db
c
exit
@liked_events_in_browser
@user.likes
@liked_events_in_db
like
Like.where(event_id: like.event_id, liker_id: like.liker_id)
like = @liked_events_in_db[0]
n
c
n
c
n
@liked_events_in_browser.length <=> @liked_events_in_db.length
n
@user.liked_events
@liked_events_in_db
n
params[:liked_events]
n
exit
params[:liked_events]
params[:liked_events
params
@liked_events_in_browser
n
exit
params
params[:image_url]
@user.profile_photo.url
@user.image_url
n
params[:email]
params[:email
n
@user == current_user
exit
current_user
@current_user
@user
c
exit
c
@event.organizer_id == current_user.id
@event
c
event_params
c
event_params
c
n
@event.organizer_id == current_user.id
@event.valid?
@event
params[:event_id]
c
@event.valid?
@event
c
event_params
params
@event
c
params[:timestamp_start]
params[:timestamp_start
@event
exit
c
User.find(1).orders[0]?.id
User.find(1).orders[0].id
User.find(1).orders
@user_orders
@user_organized_events
c
@user_orders
@user_attending_events
@user_organized_events
@user
c
Event.find(14)
Event.find(14).timestamp_start
DateTime.parse(params[:timestamp_start])
params[:timestamp_start]
DateTime.new(params[:timestamp_start])
params[:timestamp_start]
@event.timestamp_start
n
c
@event.errors.full_messages
c
@event.valid?
@event
n
c
@event.title.valid?
@event
n
exit
@event
n
c
@user.attending_events.map(&:id)
@user.attending_events
c
@user_organized_events[0].id
@user_organized_events
